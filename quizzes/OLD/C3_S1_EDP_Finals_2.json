{
  "quizInfo": {
    "Subject": "Event-Driven Programming",
    "Term": "Finals",
    "Title": "Full Course Review",
    "LastModified": "16 December 2024",
    "Authors": [
      "Alexander Oro"
    ],
    "References": [
      ""
    ]
  },
  "quizData": [
    {
      "question": "What is a class in .NET that encapsulates a method and also a reference type data that holds a reference method?",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Event Handler",
        "Encapsulation",
        "Abstract"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "What is the keyword used in declaring a delegate?",
      "answer": "delegate",
      "choices": [
        "delegate",
        "abstract",
        "void",
        "new"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following can be implemented?",
      "answer": "Interface",
      "choices": [
        "Delegate",
        "Interface",
        "Abstract",
        "Encapsulation"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is faster to execute?",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Interface",
        "Abstract",
        "Encapsulation"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following can implement a method only once?",
      "answer": "Interface",
      "choices": [
        "Delegate",
        "Interface",
        "Abstract",
        "Encapsulation"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is instantiated using the 'new' keyword?",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Interface",
        "Abstract",
        "Encapsulation"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following encapsulates a method?",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Interface",
        "Abstract",
        "Encapsulation"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "What is the return type of the delegate in the example public delegate int GetAnswer(int x, int y);?",
      "answer": "int",
      "choices": [
        "int",
        "string",
        "bool",
        "float"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "What keyword is used to instantiate a delegate?",
      "answer": "new",
      "choices": [
        "new",
        "instantiate",
        "define",
        "delegate"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "What is the purpose of a delegate in C#?",
      "answer": "Reference method",
      "choices": [
        "Reference method",
        "Handle event",
        "Initialize object",
        "Encapsulate data"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "What must match between a delegate and the method it calls?",
      "answer": "Signature",
      "choices": [
        "Return type",
        "Method name",
        "Parameter count",
        "Signature"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following are not bound to any specific type?",
      "answer": "Generic Delegates",
      "choices": [
        "Generic Delegates",
        "Handle Event",
        "Interface",
        "Abstract"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following can reference a method that returns and takes parameters of different types?",
      "answer": "Generic Delegates",
      "choices": [
        "Generic Delegates",
        "Handle Event",
        "Interface",
        "Delegate"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "They have no implementation; they are just safe callbacks and only have a declaration.",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "These can reference any method of a class that provides arguments and return types.",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "These are used if a class needs more than one (1) implementation of the method.",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "These are faster to execute but slower to get.",
      "answer": "Delegate",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "A class that implements an interface can implement all the methods associated with it.",
      "answer": "Interface",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Using these allows extending some of the objectsâ€™ functionality.",
      "answer": "Interface",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "These can implement a method only once",
      "answer": "Interface",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "These are slower in executing but faster to get.",
      "answer": "Interface",
      "choices": [
        "Delegate",
        "Interface"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following are usually task initiators?",
      "answer": "Events",
      "choices": [
        "Delegates",
        "Events"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is a member of a class that is fired whenever a specific action takes place?",
      "answer": "event",
      "choices": [
        "delegate",
        "interface",
        "event",
        "method"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following occus when the method that has been created and registered to this event is automatically invoked?",
      "answer": "event",
      "choices": [
        "delegate",
        "interface",
        "event",
        "instance"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "The methods that are invoked when an event occurs are known ____.",
      "answer": "event handler",
      "choices": [
        "delegate",
        "event handler",
        "interface",
        "instance"
      ],
      "reference": "01_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following stores key or value pairs where the key represents the value in the collection?",
      "answer": "Hastable",
      "choices": [
        "Hastable",
        "Queue",
        "SortedList",
        "Stack"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following represents a Last In, First Out (LIFO) collection of objects?",
      "answer": "Stack",
      "choices": [
        "Hastable",
        "List<T>",
        "SortedList",
        "Stack"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following represents a First In, First Out (FIFO) collection of objects?",
      "answer": "Queue",
      "choices": [
        "Hastable",
        "Queue",
        "SortedList",
        "List<T>"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is an interface that provides a list of elements?",
      "answer": "IDictionary",
      "choices": [
        "IDictionary",
        "IEnumerable",
        "Hastable",
        "Queue"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is an interface that allows looping through elements in a collection?",
      "answer": "IEnumerable",
      "choices": [
        "IDictionary",
        "IEnumerable",
        "Hastable",
        "Queue"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method adds an element to the top of the stack?",
      "answer": "Push",
      "choices": [
        "Push",
        "Add",
        "Peek",
        "Pop"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method returns the first element in the queue?",
      "answer": "Peek",
      "choices": [
        "Push",
        "Add",
        "Peek",
        "Pop"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is a combination of ArrayList and Hashtable?",
      "answer": "SortedList",
      "choices": [
        "SortedList",
        "Queue",
        "Stack",
        "IDictionary"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is used to create collection classes?",
      "answer": "Generics",
      "choices": [
        "Generics",
        "Standard",
        "ArrayList",
        "System"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is a group of objects that provides a standard set of types for storing and managing collections of objects?",
      "answer": "Collections",
      "choices": [
        "Generics",
        "Standard",
        "Collections",
        "ArrayList"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following contains lists, linked lists, dictionaries, and arrays?",
      "answer": "Collections",
      "choices": [
        "Generics",
        "Standard",
        "Collections",
        "ArrayList"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is a collections class that is known for an ordered collection of objects?",
      "answer": "ArrayList",
      "choices": [
        "Generics",
        "Standard",
        "ArrayList",
        "System"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is known as dynamic since items can be added and removed from the specified index location?",
      "answer": "ArrayList",
      "choices": [
        "Generics",
        "Standard",
        "ArrayList",
        "System"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "The key or index value must be specified to access the values in it.",
      "answer": "SortedList",
      "choices": [
        "Hastable",
        "Queue",
        "SortedList",
        "Stack"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which property gets or sets the capacity of the SortedList?",
      "answer": "Capacity",
      "choices": [
        "Capacity",
        "Count",
        "Item",
        "Keys"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which property gets the count of the number of elements in the SortedList?",
      "answer": "Count",
      "choices": [
        "Capacity",
        "Count",
        "Item",
        "Keys"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which property carry the keys in the SortedList?",
      "answer": "Keys",
      "choices": [
        "Capacity",
        "Count",
        "Item",
        "Keys"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which property carry the values in the SortedList?",
      "answer": "Values",
      "choices": [
        "Capacity",
        "Values",
        "Item",
        "Keys"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which property gets and sets the value associated with a specific key in the SortedList?",
      "answer": "Item",
      "choices": [
        "Capacity",
        "Values",
        "Item",
        "Keys"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method adds an item with the specified key and value into the SortedList?",
      "answer": "void Add(object key, object value)",
      "choices": [
        "void Add(object key, object value)",
        "void Clear()",
        "bool ContainsKey(object key)",
        "object GetByIndex(int index)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method is used to remove all the items in the SortedList?",
      "answer": "void Clear()",
      "choices": [
        "void Add(object key, object value)",
        "void Clear()",
        "bool ContainsKey(object key)",
        "object GetByIndex(int index)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method is used If the SortedList contains the specified key, then it will return the Boolean value true?",
      "answer": "bool ContainsKey(object key)",
      "choices": [
        "void Add(object key, object value)",
        "void Clear()",
        "bool ContainsKey(object key)",
        "object GetByIndex(int index)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method is used If the SortedListcontains the specified value, then it will return the Boolean value true?",
      "answer": "bool ContainsValue(object value)",
      "choices": [
        "bool ContainsValue(object value)",
        "void Add(object key, object value)",
        "bool ContainsKey(object key)",
        "object GetByIndex(int index)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method returns the value of the specified index?",
      "answer": "object GetByIndex(int index)",
      "choices": [
        "object GetByIndex(int index)",
        "bool ContainsValue(object value)",
        "object GetKey(int index)",
        "bool ContainsKey(object key)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method returns the key of the specified index?",
      "answer": "object GetKey(int index)",
      "choices": [
        "object GetByIndex(int index)",
        "bool ContainsValue(object value)",
        "object GetKey(int index)",
        "bool ContainsKey(object key)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method is used if a key that is specified will remove its element?",
      "answer": "void Remove(object key)",
      "choices": [
        "void Remove(object key)",
        "void RemoveAt(int index)",
        "object GetByIndex(int index)",
        "object GetKey(int index)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which method is used if an index that is specified will remove its element in the SortedList?",
      "answer": "void RemoveAt(int index)",
      "choices": [
        "void Remove(object key)",
        "void RemoveAt(int index)",
        "object GetByIndex(int index)",
        "object GetKey(int index)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is an interface that allows you to determine the number of elements in a collections and copy them in a simple array type?",
      "answer": "ICollection",
      "choices": [
        "IDictionary",
        "IEnumerable",
        "ICollection",
        "Queue"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is a generic collection that provides an efficient and dynamically allocated array, which is commonly used to store a list of duplicate objects?",
      "answer": "List<T>",
      "choices": [
        "List<T>",
        "SortedList",
        "Queue",
        "Stack"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is the correct syntax for creating List<T>?",
      "answer": "List<T> variableName = new List<T>()",
      "choices": [
        "List<T> variableName = new List<T>()",
        "List<T> variableName = new List()",
        "List<int> variableName = new List<int>",
        "List variableName = new List<T>()"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following method adds an element to the end of queue?",
      "answer": "Enqueue",
      "choices": [
        "Enqueue",
        "Push",
        "Add",
        "Pop"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following method will return the element at the beginning of the queue without removing it?",
      "answer": "Peek",
      "choices": [
        "Peek",
        "Remove",
        "Pop",
        "Drop"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following method removes and returns the value at the beginning of the queue?",
      "answer": "Dequeue",
      "choices": [
        "Dequeue",
        "Remove",
        "Pop",
        "Drop"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is the correct syntax for creating Queue<T>?",
      "answer": "Queue<int> ageQueue = new Queue<int>()",
      "choices": [
        "Queue<int> ageQueue = new Queue<int>()",
        "Queue<T> ageQueue = new Queue<T>()",
        "Queue<int> ageQueue = new Queue<int>",
        "Queue<T> ageQueue = new Queue<T>"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following method adds an element at the top in the stack?",
      "answer": "Push",
      "choices": [
        "Enqueue",
        "Push",
        "Add",
        "Pop"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following method will return the element at the top of the stack without removing it?",
      "answer": "Peek",
      "choices": [
        "Enqueue",
        "Search",
        "Contain",
        "Peek"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following method removes and returnsthe value at the top of the stack?",
      "answer": "Pop",
      "choices": [
        "Dequeue",
        "Remove",
        "Pop",
        "Drop"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which of the following is the correct syntax for creating Stack<T>?",
      "answer": "Stack<int> ageStack = new Stack<int>(20)",
      "choices": [
        "Stack<int> ageStack = new Stack<int>(20)",
        "Stack<T> ageStack = new Stack<T>()",
        "Stack<int> ageStack = new Stack<int>",
        "Stack<T> ageStack = new Stack<T>(20)"
      ],
      "reference": "02_Handout_1",
      "term": "Prelims"
    },
    {
      "question": "Which is represented by classes?",
      "answer": "Exception",
      "choices": [
        "Exception",
        "SystemException",
        "ApplicationException",
        "System"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What is the base class of all exceptions in C#?",
      "answer": "Exception",
      "choices": [
        "Exception",
        "SystemException",
        "ApplicationException",
        "System"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which exception is generated by user programs?",
      "answer": "ApplicationException",
      "choices": [
        "ApplicationException",
        "Exception",
        "SystemException",
        "System"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What type of exception does the CLR generate?",
      "answer": "SystemException",
      "choices": [
        "SystemException",
        "Exception",
        "ApplicationException",
        "System"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which class sits at the top of the exception hierarchy?",
      "answer": "System.Exception",
      "choices": [
        "System.Exception",
        "System.ArithmeticException",
        "System.OverflowException",
        "System.ArgumentException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What exception is thrown for errors in arithmetic operations?",
      "answer": "System.ArithmeticException",
      "choices": [
        "System.ArithmeticException",
        "System.Exception",
        "System.OverflowException",
        "System.IndexOutOfRangeException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which exception occurs when an overflow happens in a checked operation?",
      "answer": "System.OverflowException",
      "choices": [
        "System.OverflowException",
        "System.StackOverflowException",
        "System.OutOfMemoryException",
        "System.IndexOutOfRangeException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What exception is thrown when an invalid argument is passed to a method?",
      "answer": "System.ArgumentException",
      "choices": [
        "System.ArgumentException",
        "System.OverflowException",
        "System.ArithmeticException",
        "System.OutOfMemoryException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What exception occurs when a null argument is passed to a method?",
      "answer": "System.ArgumentNullException",
      "choices": [
        "System.ArgumentNullException",
        "System.OverflowException",
        "System.IndexOutOfRangeException",
        "System.OutOfMemoryException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which exception occurs when attempting to index outside the bounds of an array?",
      "answer": "System.IndexOutOfRangeException",
      "choices": [
        "System.IndexOutOfRangeException",
        "System.StackOverflowException",
        "System.ArgumentException",
        "System.OverflowException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which exception is thrown when available memory is insufficient?",
      "answer": "System.OutOfMemoryException",
      "choices": [
        "System.OutOfMemoryException",
        "System.Exception",
        "System.ArithmeticException",
        "System.StackOverflowException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What exception is thrown when the execution stack is exhausted?",
      "answer": "System.StackOverflowException",
      "choices": [
        "System.StackOverflowException",
        "System.FormatException",
        "System.OutOfMemoryException",
        "System.ArgumentNullException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which exception is thrown when a string or argument has an invalid format?",
      "answer": "System.FormatException",
      "choices": [
        "System.FormatException",
        "System.StackOverflowException",
        "System.ArgumentNullException",
        "System.OverflowException"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What keyword is used to check for the occurrence of any exceptions in C#?",
      "answer": "try",
      "choices": [
        "try",
        "catch",
        "throw",
        "finally"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which keyword is used to handle exceptions in C#?",
      "answer": "catch",
      "choices": [
        "catch",
        "try",
        "throw",
        "finally"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which keyword is used to manually throw an exception?",
      "answer": "throw",
      "choices": [
        "throw",
        "catch",
        "try",
        "finally"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which keyword is used to execute code after an exception is thrown or not?",
      "answer": "finally",
      "choices": [
        "finally",
        "throw",
        "catch",
        "try"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What is the syntax to throw an exception object manually?",
      "answer": "throw new exception_Object;",
      "choices": [
        "throw new exception_Object;",
        "throw new exception_Object();",
        "throw exception_Object();",
        "new exception_Object;"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What is the instance of a class derived from the Exception class?",
      "answer": "exception_Object",
      "choices": [
        "exception_Object",
        "exception_Class",
        "exception_Instance",
        "exception_List"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which keyword is used to create a new object in C#?",
      "answer": "new",
      "choices": [
        "new",
        "throw",
        "using",
        "try"
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What happens if you throw an exception outside of a try-catch block?",
      "answer": "The program will terminate, and an error message will be displayed.",
      "choices": [
        "The program will terminate, and an error message will be displayed.",
        "The program will pause execution.",
        "The program will continue running.",
        "The exception will be logged but not displayed."
      ],
      "reference": "03 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What is a class in C#.NET that can create and control execution units?",
      "answer": "Thread",
      "choices": [
        "Process",
        "ExecutionUnit",
        "Task",
        "Thread"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which namespace contains the Thread class?",
      "answer": "System.Threading",
      "choices": [
        "System.Exception",
        "System.Collections",
        "System.Diagnostics",
        "System.Threading"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What is the first thread that starts when a process begins?",
      "answer": "main thread",
      "choices": [
        "child thread",
        "worker thread",
        "background thread",
        "main thread"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What do you call threads created by the main thread?",
      "answer": "child thread",
      "choices": [
        "sibling thread",
        "parent thread",
        "worker thread",
        "child thread"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What type of object must be created to initialize a child thread?",
      "answer": "delegate",
      "choices": [
        "event",
        "method",
        "interface",
        "delegate"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What delegate is used to execute code in the Thread class?",
      "answer": "ThreadStart",
      "choices": [
        "Action",
        "Func",
        "ThreadCallback",
        "ThreadStart"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "In which state does a new thread begin its life cycle?",
      "answer": "Unstarted",
      "choices": [
        "Running",
        "Stopped",
        "Ready",
        "Unstarted"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What method is called to transition a thread from Unstarted to another state?",
      "answer": "Start",
      "choices": [
        "Run",
        "Begin",
        "Initialize",
        "Start"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which state indicates that a thread is currently executing?",
      "answer": "Running",
      "choices": [
        "Unstarted",
        "Blocked",
        "Stopped",
        "Running"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which method is called to terminate a thread?",
      "answer": "Abort",
      "choices": [
        "Stop",
        "Terminate",
        "End",
        "Abort"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "In which state is a thread when it is waiting for an I/O operation?",
      "answer": "Blocked",
      "choices": [
        "Running",
        "Unstarted",
        "WaitSleepJoin",
        "Blocked"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What state does a running thread enter when it sleeps for a specified duration?",
      "answer": "WaitSleepJoin",
      "choices": [
        "Blocked",
        "Ready",
        "Stopped",
        "WaitSleepJoin"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which method is associated with releasing a thread waiting on a monitor?",
      "answer": "Monitor",
      "choices": [
        "Join",
        "Pulse",
        "Sleep",
        "Monitor"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What method is used to move the next waiting thread back to the Started state?",
      "answer": "Pulse",
      "choices": [
        "Join",
        "Reset",
        "Start",
        "Pulse"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which method moves all waiting threads back to the Started state?",
      "answer": "PulseAll",
      "choices": [
        "Pulse",
        "Join",
        "Start",
        "PulseAll"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What method is called to make a thread wait until another thread finishes?",
      "answer": "Join",
      "choices": [
        "Abort",
        "Sleep",
        "Wait",
        "Join"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What state indicates a thread is ready to run and waiting for CPU time?",
      "answer": "Ready",
      "choices": [
        "Unstarted",
        "Stopped",
        "Running",
        "Ready"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What state does a thread enter when it completes its task?",
      "answer": "Stopped",
      "choices": [
        "Running",
        "Unstarted",
        "Blocked",
        "Stopped"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What exception is thrown when a thread is aborted?",
      "answer": "ThreadAbortException",
      "choices": [
        "ThreadException",
        "TaskAbortedException",
        "OperationCanceledException",
        "ThreadAbortException"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which property returns the currently running thread?",
      "answer": "CurrentThread",
      "choices": [
        "MainThread",
        "ActiveThread",
        "RunningThread",
        "CurrentThread"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which property indicates if a thread is still executing?",
      "answer": "IsAlive",
      "choices": [
        "IsRunning",
        "IsActive",
        "IsExecuting",
        "IsAlive"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which property indicates if the thread is a background thread?",
      "answer": "IsBackground",
      "choices": [
        "IsForeground",
        "IsRunning",
        "IsAlive",
        "IsBackground"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which property is used to get or set the name of a thread?",
      "answer": "Name",
      "choices": [
        "ThreadID",
        "ThreadName",
        "Identifier",
        "Name"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which property represents the priority of a thread?",
      "answer": "Priority",
      "choices": [
        "Importance",
        "Weight",
        "Level",
        "Priority"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "Which property contains the current state of the thread?",
      "answer": "ThreadState",
      "choices": [
        "State",
        "Status",
        "Condition",
        "ThreadState"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What method is used to terminate a thread?",
      "answer": "public void Abort()",
      "choices": [
        "public void Stop()",
        "public void Terminate()",
        "public void End()",
        "public void Abort()"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What method is used to interrupt a thread in the WaitSleepJoin state?",
      "answer": "public void Interrupt()",
      "choices": [
        "public void Pause()",
        "public void Stop()",
        "public void Abort()",
        "public void Interrupt()"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What method is used to block the calling thread until a specified thread terminates?",
      "answer": "public void Join()",
      "choices": [
        "public void Wait()",
        "public void Pause()",
        "public void Block()",
        "public void Join()"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What static method is used to withdraw an abort request?",
      "answer": "public static void ResetAbort()",
      "choices": [
        "public static void Cancel()",
        "public static void Stop()",
        "public static void Resume()",
        "public static void ResetAbort()"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What method is used to start a thread?",
      "answer": "public void Start()",
      "choices": [
        "public void Run()",
        "public void Begin()",
        "public void Launch()",
        "public void Start()"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What static method pauses a thread for a specified duration?",
      "answer": "public static void Sleep()",
      "choices": [
        "public static void Wait()",
        "public static void Stop()",
        "public static void Block()",
        "public static void Sleep()"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What feature allows an application to have more than one execution path at a time?",
      "answer": "multithreading",
      "choices": [
        "multitasking",
        "multiprocessing",
        "concurrency",
        "multithreading"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "What condition occurs when two threads access shared resources simultaneously?",
      "answer": "race condition",
      "choices": [
        "deadlock",
        "starvation",
        "blockage",
        "race condition"
      ],
      "reference": "04 Handout 1",
      "term": "Midterm"
    },
    {
      "question": "They represent a source that provides a sequence of bytes, such as a file, an input/output (I/O) device, an interprocess communication pipe, or a TCP/IP socket.",
      "answer": "Streams",
      "choices": [
        "Streams",
        "Output Streams",
        "Input Streams",
        "FileStream"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It refers to a printer, remote server location, or a printer where the data is written.",
      "answer": "Output Streams",
      "choices": [
        "Streams",
        "Output Streams",
        "Input Streams",
        "FileStream"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It refers to a file or any source where the data can be read and assigned to the memory variables in the program.",
      "answer": "Input Streams",
      "choices": [
        "Streams",
        "Output Streams",
        "Input Streams",
        "FileStream"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It is a namespace contains classes that allow to write and read files.",
      "answer": "System.IO",
      "choices": [
        "System.IO",
        "System.Stream",
        "System.Exception",
        "using System"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This namespace needs to be included in all programs that use streams.",
      "answer": "System.IO",
      "choices": [
        "System.IO",
        "System.Stream",
        "System.Exception",
        "using System"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "All files are byte-oriented, meaning the data iswritten or read into the files in terms of bytes in this namespace.",
      "answer": "System.IO",
      "choices": [
        "System.IO",
        "System.Stream",
        "System.Exception",
        "using System"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It is a classthat is used to create a byte-oriented stream attached to a file.",
      "answer": "FileStream",
      "choices": [
        "Streams",
        "Output Streams",
        "Input Streams",
        "FileStream"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is the code to be used for creating a FileStream object.",
      "answer": "FileStream(string filename, FileMode mode)",
      "choices": [
        "FileStream(string filename, FileMode mode)",
        "FileStream(string, FileMode mode)",
        "FileMode (string filename, FileStream mode)",
        "FileStream(FileMode mode, string filename)"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This parameter specifies how the file needs to be opened.",
      "answer": "mode",
      "choices": [
        "mode",
        "node",
        "argument",
        "filemode"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It creates a new output file, which will be overwritten if a file already exists.",
      "answer": "FileMode.Create",
      "choices": [
        "FileMode.Create",
        "FileMode.CreateNew",
        "FileMode.Open",
        "FileMode.OpenOrCreate"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It creates a new output file that is not existing.",
      "answer": "FileMode.CreateNew",
      "choices": [
        "FileMode.Create",
        "FileMode.CreateNew",
        "FileMode.Open",
        "FileMode.Truncate"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It opens an existing file.",
      "answer": "FileMode.Open",
      "choices": [
        "FileMode.Truncate",
        "FileMode.CreateNew",
        "FileMode.Open",
        "FileMode.OpenOrCreate"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It opens an existing. If not, it creates a new one.",
      "answer": "FileMode.OpenOrCreate",
      "choices": [
        "FileMode.Create",
        "FileMode.CreateNew",
        "FileMode.Open",
        "FileMode.OpenOrCreate"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It opens an existing file and truncates the content that already exists.",
      "answer": "FileMode.Truncate",
      "choices": [
        "FileMode.Create",
        "FileMode.CreateNew",
        "FileMode.Open",
        "FileMode.Truncate"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is used to open a file that has access to read or write.",
      "answer": "FileStream constructor",
      "choices": [
        "FileStream constructor",
        "Stream constructor",
        "Output Stream constructor",
        "Input Stream constructor"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This method reads a single byte from a file and returns as an integer value.",
      "answer": "ReadByte()",
      "choices": [
        "ReadByte()",
        "Read()",
        "WriteByte()",
        "Write()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This method reads the specified number of bytes from a file into an array.",
      "answer": "Read()",
      "choices": [
        "ReadByte()",
        "Read()",
        "WriteByte()",
        "Write()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It writes the specified byte into the file.",
      "answer": "WriteByte()",
      "choices": [
        "WriteByte()",
        "Write()",
        "Flush()",
        "ReadByte()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "Itt writes an array of bytes into the file.",
      "answer": "Write()",
      "choices": [
        "WriteByte()",
        "Write()",
        "Flush()",
        "void Close()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This method instantly writes the data into the file.",
      "answer": "Flush()",
      "choices": [
        "WriteByte()",
        "Write()",
        "Flush()",
        "void Close()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This method closes the file, releasing the system resources that are allocated to it.",
      "answer": "void Close()",
      "choices": [
        "WriteByte()",
        "Write()",
        "Flush()",
        "void Close()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is the method used to relocate the file pointer in the file.",
      "answer": "Seek()",
      "choices": [
        "Seek()",
        "Peek()",
        "Point()",
        "Relocate()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is a method that allows setting the file position indicator of file pointer to the preferred location in the file.",
      "answer": "Seek()",
      "choices": [
        "Seek()",
        "Peek()",
        "Point()",
        "Relocate()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is the proper syntax for Seek() method.",
      "answer": "long Seek(long n, SeekOrigin location)",
      "choices": [
        "long Seek(long filename, SeekOrigin location)",
        "long Seek(long n, SeekOrigin location)",
        "long Seek(SeekOrigin location, long n)",
        "Seek(SeekOrigin location, long n)"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This determines the location of the next read/write operation to take place on the file.",
      "answer": "file pointer",
      "choices": [
        "file pointer",
        "seek",
        "character stream",
        "file finder"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This can get or set the position using the Position property of Stream class.",
      "answer": "file pointer",
      "choices": [
        "file pointer",
        "stream pointer",
        "character stream",
        "file finder"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It returns true if the stream can be read.",
      "answer": "bool CanRead",
      "choices": [
        "bool CanSeek",
        "bool CanTimeout",
        "bool CanWrite",
        "bool CanRead"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It returns true if the stream supports position requests.",
      "answer": "bool CanSeek",
      "choices": [
        "bool CanSeek",
        "bool CanTimeout",
        "bool CanWrite",
        "bool CanRead"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It returns true if the stream can time out.",
      "answer": "bool CanTimeout",
      "choices": [
        "bool CanSeek",
        "bool CanTimeout",
        "bool CanWrite",
        "bool CanRead"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It returns true if the stream can be written.",
      "answer": "bool CanWrite",
      "choices": [
        "bool CanSeek",
        "bool CanTimeout",
        "bool CanWrite",
        "bool CanRead"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It contains the size of the stream.",
      "answer": "long length",
      "choices": [
        "long length",
        "int ReadTimeout",
        "int WriteTimeout",
        "int length"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It indicates the time before a timeout occurs for read operations.",
      "answer": "int ReadTimeout",
      "choices": [
        "long length",
        "int ReadTimeout",
        "int WriteTimeout",
        "int length"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It indicates the time before a timeout occurs for write operations.",
      "answer": "int WriteTimeout",
      "choices": [
        "long length",
        "int ReadTimeout",
        "int WriteTimeout",
        "int length"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is used to perform a character-based file for managing text files.",
      "answer": "character stream",
      "choices": [
        "file pointer",
        "stream reader",
        "character stream",
        "stream writer"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is wrapped inside either a StreamReader or a StreamWriter.",
      "answer": "FileStream",
      "choices": [
        "Streams",
        "Output Streams",
        "Input Streams",
        "FileStream"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This writes characters to a stream and contains several constructors.",
      "answer": "StreamWriter",
      "choices": [
        "StreamWriter",
        "StreamReader",
        "FileStream",
        "Character Stream"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It is used to create a character-based output stream.",
      "answer": "SteamWriter(Stream stream)",
      "choices": [
        "StreamWriter(string fileName)",
        "SteamWriter(Stream stream)",
        "StreamReader(Stream stream)",
        "StreamReader(string fileName)"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It is used to open a file directly.",
      "answer": "StreamWriter(string fileName)",
      "choices": [
        "StreamWriter(string fileName)",
        "SteamWriter(Stream stream)",
        "StreamReader(Stream stream)",
        "StreamReader(string fileName)"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It closes the file.",
      "answer": "Close()",
      "choices": [
        "Close()",
        "Flush()",
        "Write()",
        "WriteLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It instantly saves the file content from buffer to memory",
      "answer": "Flush()",
      "choices": [
        "Close()",
        "Flush()",
        "Write()",
        "WriteLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "Using a File stream class, this writes into the specified file.",
      "answer": "Write()",
      "choices": [
        "Close()",
        "Flush()",
        "Write()",
        "WriteLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "Line by line, it writes into a file",
      "answer": "WriteLine()",
      "choices": [
        "Close()",
        "Flush()",
        "Write()",
        "WriteLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "This is a class that reads characters from a byte stream.",
      "answer": "StreamReader",
      "choices": [
        "StreamWriter",
        "StreamReader",
        "FileStream",
        "Character Stream"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It is the name of an open stream such I/O devices or a file.",
      "answer": "StreamReader(Stream stream)",
      "choices": [
        "StreamWriter(string fileName)",
        "SteamWriter(Stream stream)",
        "StreamReader(Stream stream)",
        "StreamReader(string fileName)"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It specifies the name of the file to open.",
      "answer": "StreamReader(string fileName)",
      "choices": [
        "StreamWriter(string fileName)",
        "SteamWriter(Stream stream)",
        "StreamReader(Stream stream)",
        "StreamReader(string fileName)"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "From buffer to memory, it instantly saves the file content.",
      "answer": "Flush()",
      "choices": [
        "Close()",
        "Flush()",
        "Read()",
        "ReadLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It closes the file and is mandatory to this class.",
      "answer": "Close()",
      "choices": [
        "Close()",
        "Flush()",
        "Read()",
        "ReadLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "From the file stream, it reads the content.",
      "answer": "Read()",
      "choices": [
        "ReadToEnd()",
        "Peek()",
        "Read()",
        "ReadLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "From the given file stream, it reads the content line by line.",
      "answer": "ReadLine()",
      "choices": [
        "ReadToEnd()",
        "Peek()",
        "Read()",
        "ReadLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "From the current location until the end of the stream, it reads all characters.",
      "answer": "ReadToEnd()",
      "choices": [
        "ReadToEnd()",
        "Peek()",
        "Seek()",
        "ReadLine()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "It returns the value in the stream without moving the file pointer.",
      "answer": "Peek()",
      "choices": [
        "Flush()",
        "Peek()",
        "Seek()",
        "Close()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "Sets the file pointer at the desired position in a file",
      "answer": "Seek()",
      "choices": [
        "Flush()",
        "Peek()",
        "Seek()",
        "Close()"
      ],
      "reference": "05 Handout 1",
      "term": "Pre-finals"
    },
    {
      "question": "These are files that contain compiled code targeted at the .NET Framework.",
      "answer": "Assemblies",
      "choices": [
        "Assemblies",
        "Metadata",
        "Steams",
        "References"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "These are basically physical packages meant for distributing code",
      "answer": "Assemblies",
      "choices": [
        "Assemblies",
        "Metadata",
        "Steams",
        "References"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Which is NOT TRUE  about the assemblies",
      "answer": "They are giving a strong, unique name based on the private key cryptography to avoid name collision",
      "choices": [
        "These are files that contain compiled code targeted at the .NET Framework.",
        "These are basically physical packages meant for distributing code",
        "The .NET classes are actually contained in several assemblies",
        "They are giving a strong, unique name based on the private key cryptography to avoid name collision"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "These are two sections of an assembly.",
      "answer": "Metadata and Manifest",
      "choices": [
        "Metadata and Manifest",
        ".exe and .dll",
        "shared and single",
        "public and private"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "These are two file extensions of an assembly.",
      "answer": ".exe and .dll",
      "choices": [
        "Metadata and Manifest",
        ".exe and .dll",
        "shared and single",
        "public and private"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It includes information about the data types of the program that are being used.",
      "answer": "medata",
      "choices": [
        "medata",
        "manifest",
        ".exe",
        ".dll"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It holds the information of the assembly, which consists of the name, version number, and the type of mapping information.",
      "answer": "manifest",
      "choices": [
        "medata",
        "manifest",
        ".exe",
        ".dll"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It is for standalone applications.",
      "answer": ".exe",
      "choices": [
        "medata",
        "manifest",
        ".exe",
        ".dll"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It is for reusable components.",
      "answer": ".dll",
      "choices": [
        "medata",
        "manifest",
        ".exe",
        ".dll"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": ".NET Frameworksâ€™ core assemblies location can be found in _____.",
      "answer": "C:\\Windows\\assembly",
      "choices": [
        "C:\\Windows\\assembly",
        "C:\\Windows32\\assembly",
        "C:\\Program Files\\assembly",
        "C:\\Documents\\assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It is the simplest type of assembly",
      "answer": "Private Assembly",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It can only be used within a software package that is intended to be used.",
      "answer": "Private Assembly",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It does not require registry entries",
      "answer": "Private Assembly",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Two assemblies with the same class name are not a problem since the application can only see the classes that are mentioned in its assemblies",
      "answer": "Private Assembly",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "These are libraries that other applications can commonly use.",
      "answer": "Shared Assembly",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Security precautions are necessary when using this assembly since any other software can access an assembly.",
      "answer": "Shared Assembly",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It is a common problem in shared assembly wherein other classes or variables have the same name that matches with the other shared assembly",
      "answer": "Name Collision",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "A different form of the same assembly might overwrite the shared assembly, and the new version might be incompatible with the existing code.",
      "answer": "Name Collision",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Shared assemblies are giving a strong, unique name based on the private key cryptography to avoid name collision.",
      "answer": "Name Collision",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It enables several applications to share shared assembly.",
      "answer": "Global Assembly Cache",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It is required to add the assembly to the special directory.",
      "answer": "Global Assembly Cache",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "It is a centralized storage location for .NET Assemblies.",
      "answer": "Global Assembly Cache",
      "choices": [
        "Private Assembly",
        "Name Collision",
        "Global Assembly Cache",
        "Shared Assembly"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Which step specifies the statement?<BR>Create a project containing a class file. The class file contains the methods and properties that you want other applications to access.",
      "answer": "Step 1",
      "choices": [
        "Step 1",
        "Step 2",
        "Step 3",
        "Step 4"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Which step specifies the statement?<BR>Generate a strong name for the project. The strong name is saved in a strong key filename. The strong key file is created named ShareAssemblyMessageKeyFile.snk and located at the solutions explorer.",
      "answer": "Step 2",
      "choices": [
        "Step 1",
        "Step 2",
        "Step 3",
        "Step 4"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Which step specifies the statement?<BR>Specify the key filename in the project by indicating its strong key filename in the AssemblyInfo.cs file.",
      "answer": "Step 3",
      "choices": [
        "Step 1",
        "Step 2",
        "Step 3",
        "Step 4"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Which step specifies the statement?<BR>Compile the project to generate an assembly. The assembly is generated with the extension .dll.",
      "answer": "Step 4",
      "choices": [
        "Step 1",
        "Step 2",
        "Step 3",
        "Step 4"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "Which is not a step in creating a shared assembly?",
      "answer": "Create a project containing a stream file. The class file contains the methods and properties that you want other applications to access.",
      "choices": [
        "Create a project containing a stream file. The class file contains the methods and properties that you want other applications to access.",
        "Generate a strong name for the project. The strong name is saved in a strong key filename. The strong key file is created named ShareAssemblyMessageKeyFile.snk and\r\nlocated at the solutions explorer",
        "Specify the key filename in the project by indicating its strong key filename in the AssemblyInfo.cs file",
        "Compile the project to generate an assembly. The assembly is generated with the extension .dll"
      ],
      "reference": "06 Handout 1",
      "term": "Prefinals"
    },
    {
      "question": "What does ADO.NET stand for?",
      "answer": "Active Data Objects",
      "choices": [
        "Active Data Objects",
        "Abstract Data Operations",
        "Applied Data Objects",
        "Annotated Data Objects"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which library allows retrieval and updating of information in various relational databases?",
      "answer": "ADO.NET",
      "choices": [
        "ADO.NET",
        "OLE DB Library",
        "Entity Framework Library",
        "SQL Data Library"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which includes Microsoft SQL Server, Microsoft Access, Oracle, and XML?",
      "answer": "ADO.NET",
      "choices": [
        "ADO.NET",
        "OLE DB Library",
        "Entity Framework Library",
        "SQL Data Library"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which relies on the .NET Frameworkâ€™s various classes to process requests and transition between a database system and the user?",
      "answer": "ADO.NET",
      "choices": [
        "ADO.NET",
        "OLE DB Library",
        "Entity Framework Library",
        "SQL Data Library"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What are the two (2) components of ADO.NET that are commonly used?",
      "answer": "Data Provider and DataSet",
      "choices": [
        "Data Provider and DataSet",
        "Data Library and DataSet",
        "Data Provider and DataReader",
        "DataKey and DataValue"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What component is responsible for connecting to databases, executing queries, and updating data?",
      "answer": "Data Provider",
      "choices": [
        "Data Provider",
        "DataAdapter",
        "DataSet",
        "DataTable"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which component in ADO.NET implements mechanisms for connecting to a database, executing queries, and updating data?",
      "answer": "Data Provider",
      "choices": [
        "Data Provider",
        "DataAdapter",
        "DataSet",
        "DataTable"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which component in ADO.NET represents a local copy of related data tables?",
      "answer": "DataSet",
      "choices": [
        "DataSet",
        "DataView",
        "DataReader",
        "Data Provider"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which ADO.NET component is composed of one or more DataTable objects that can be manipulated and updated as per the requirements of the users or client?",
      "answer": "DataSet",
      "choices": [
        "DataSet",
        "DataView",
        "DataReader",
        "Data Provider"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which data provider is used for accessing Microsoft SQL Server?",
      "answer": "Data Provider for SQL Server",
      "choices": [
        "Data Provider for SQL Server",
        "Data Provider for Oracle",
        "Data Provider for ODBC",
        "EntityClient Provider"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace is used for accessing Microsoft SQL Server in ADO.NET?",
      "answer": "System.Data.SqlClient",
      "choices": [
        "System.Data.SqlClient",
        "System.Data.OracleClient",
        "System.Data.Odbc",
        "System.Data.EntityClient"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What does the DataSet include for representing database relations in ADO.NET?",
      "answer": "DataRelation",
      "choices": [
        "DataRelation",
        "DataAdapter",
        "DataProvider",
        "DataCommand"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which ADO.NET object is used for read-only access using a server-side cursor?",
      "answer": "DataReader",
      "choices": [
        "DataReader",
        "DataConnection",
        "DataSet",
        "DataRelation"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What ADO.NET object acts as a connection between the data source and DataSet?",
      "answer": "DataAdapters",
      "choices": [
        "DataAdapters",
        "DataReader",
        "DataProvider",
        "DataRelation"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which ADO.NET component allows users to connect and disconnect from the database?",
      "answer": "Connection",
      "choices": [
        "Connection",
        "DataCommand",
        "DataProvider",
        "DataTable"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which ADO.NET data type declaration is based on the type of data saved?",
      "answer": "DataColumn",
      "choices": [
        "DataColumn",
        "DataRelation",
        "DataTable",
        "DataCommand"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace allows connection to OLE DB data sources?",
      "answer": "System.Data.OleDb",
      "choices": [
        "System.Data.OleDb",
        "System.Data.Odbc",
        "System.Data.OracleClient",
        "System.Data.EntityClient"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What ADO.NET component is used for customizing the view of the rows in a DataTable?",
      "answer": "DataView",
      "choices": [
        "DataView",
        "DataAdapter",
        "DataCommand",
        "DataProvider"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which data provider enables connectivity to Oracle databases?",
      "answer": "Data Provider for Oracle",
      "choices": [
        "Data Provider for Oracle",
        "Data Provider for OLE DB",
        "Data Provider for ODBC",
        "EntityClient Provider"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What namespace is used for accessing Oracle databases?",
      "answer": "System.Data.OracleClient",
      "choices": [
        "System.Data.OracleClient",
        "System.Data.EntityClient",
        "System.Data.Odbc",
        "System.Data.OleDb"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What namespace enables data access on Microsoft SQL Server?",
      "answer": "System.Data.SqlClient",
      "choices": [
        "System.Data.SqlClient",
        "System.Data.OleDb",
        "System.Data.OracleClient",
        "System.Data.Odbc"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What object is responsible for managing the data for an entity in a DataSet?",
      "answer": "DataTable",
      "choices": [
        "DataTable",
        "DataColumn",
        "DataCommand",
        "DataView"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which data provider is utilized to connect to ODBC sources in ADO.NET?",
      "answer": "Data Provider for ODBC",
      "choices": [
        "Data Provider for ODBC",
        "Data Provider for OLE DB",
        "EntityClient Provider",
        "Data Provider for SQL Server"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What namespace is used for connecting to ODBC data sources?",
      "answer": "System.Data.Odbc",
      "choices": [
        "System.Data.Odbc",
        "System.Data.SqlClient",
        "System.Data.OleDb",
        "System.Data.EntityClient"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is used in ADO.NET to wrap SQL commands and stored procedures for accessing and manipulating data?",
      "answer": "Command",
      "choices": [
        "Command",
        "Connection",
        "DataView",
        "DataAdapter"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What element is responsible for mapping table names from a database to a DataTable in ADO.NET?",
      "answer": "DataColumnMapping",
      "choices": [
        "DataColumnMapping",
        "DataProvider",
        "DataTable",
        "DataView"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What acts as a read-only access tool by invoking the ExecuteReader method of the Command object?",
      "answer": "DataReaders",
      "choices": [
        "DataReaders",
        "Connection",
        "DataAdapters",
        "DataRelation"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What object is needed to close the connection when accessing data using it?",
      "answer": "DataReaders",
      "choices": [
        "DataReaders",
        "DataCommand",
        "DataProvider",
        "DataView"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What object in ADO.NET is used to perform SQL queries and execute commands?",
      "answer": "Command",
      "choices": [
        "Command",
        "Connection",
        "DataSet",
        "DataAdapter"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What namespace is used for the EntityClient Provider in ADO.NET?",
      "answer": "System.Data.EntityClient",
      "choices": [
        "System.Data.EntityClient",
        "System.Data.OleDb",
        "System.Data.OracleClient",
        "System.Data.Odbc"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which data provider enables working with Entity Framework in ADO.NET?",
      "answer": "EntityClient Provider",
      "choices": [
        "EntityClient Provider",
        "Data Provider for Oracle",
        "Data Provider for ODBC",
        "Data Provider for OLE DB"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which classes are used as wrappers for SQL statements or stored procedure calls in ADO.NET?",
      "answer": "SqlCommand, OleDbCommand, and ODBCCommand",
      "choices": [
        "SqlCommand, OleDbCommand, and ODBCCommand",
        "SqlTransaction, OleDbTransaction, ODBCTransaction",
        "SqlConnection, OleDbConnection, ODBCConnection",
        "SqlCommandBuilder, OleDbCommandBuilder, ODBCCommandBuilder"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which classes automatically generate SQL commands from a SELECT statement and are used for updating tables?",
      "answer": "SqlCommandBuilder, OleDbCommandBuilder, and ODBCCommandBuilder",
      "choices": [
        "SqlCommandBuilder, OleDbCommandBuilder, and ODBCCommandBuilder",
        "SqlDataAdapter, OleDbDataAdapter, ODBCDataAdapter",
        "SqlTransaction, OleDbTransaction, ODBCTransaction",
        "SqlParameter, OleDbParameter, ODBCParameter"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which classes are used to connect to the database in ADO.NET?",
      "answer": "SqlConnection, OleDbConnection, and ODBCConnection",
      "choices": [
        "SqlConnection, OleDbConnection, and ODBCConnection",
        "SqlDataReader, OleDbDataReader, ODBCDataReader",
        "SqlParameter, OleDbParameter, ODBCParameter",
        "SqlTransaction, OleDbTransaction, ODBCTransaction"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which classes handle interaction between DataSet and data source, and execute SQL commands to populate a DataSet?",
      "answer": "SqlDataAdapter, OleDbDataAdapter, and ODBCDataAdapter",
      "choices": [
        "SqlDataAdapter, OleDbDataAdapter, and ODBCDataAdapter",
        "SqlDataReader, OleDbDataReader, ODBCDataReader",
        "SqlParameter, OleDbParameter, ODBCParameter",
        "SqlTransaction, OleDbTransaction, ODBCTransaction"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which classes provide forward-only, read-only access to data using a cursor?",
      "answer": "SqlDataReader, OleDbDataReader, and ODBCDataReader",
      "choices": [
        "SqlDataReader, OleDbDataReader, and ODBCDataReader",
        "SqlCommandBuilder, OleDbCommandBuilder, ODBCCommandBuilder",
        "SqlConnection, OleDbConnection, ODBCConnection",
        "SqlDataAdapter, OleDbDataAdapter, ODBCDataAdapter"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which classes define a parameter to a stored procedure in ADO.NET?",
      "answer": "SqlParameter, OleDbParameter, and ODBCParameter",
      "choices": [
        "SqlParameter, OleDbParameter, and ODBCParameter",
        "SqlCommandBuilder, OleDbCommandBuilder, ODBCCommandBuilder",
        "SqlDataReader, OleDbDataReader, ODBCDataReader",
        "SqlConnection, OleDbConnection, ODBCConnection"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which classes represent transactions to be made in a data source in ADO.NET?",
      "answer": "SqlTransaction, OleDbTransaction, and ODBCTransaction",
      "choices": [
        "SqlTransaction, OleDbTransaction, and ODBCTransaction",
        "SqlDataReader, OleDbDataReader, ODBCDataReader",
        "SqlDataAdapter, OleDbDataAdapter, ODBCDataAdapter",
        "SqlCommand, OleDbCommand, ODBCCommand"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes all generic data access classes?",
      "answer": "System.Data",
      "choices": [
        "System.Data",
        "System.Data.SqlClient",
        "System.Data.Common",
        "System.Data.EntityClient"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes classes that are shared or overridden by individual data providers?",
      "answer": "System.Data.Common",
      "choices": [
        "System.Data.Common",
        "System.Data.OleDb",
        "System.Data.Sql",
        "System.Data"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes Entity Framework classes?",
      "answer": "System.Data.EntityClient",
      "choices": [
        "System.Data.EntityClient",
        "System.Data.SqlClient",
        "System.Data.Linq.SqlClient",
        "System.Data.Common"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes LINQ to SQL provider classes?",
      "answer": "System.Data.Linq.SqlClient",
      "choices": [
        "System.Data.Linq.SqlClient",
        "System.Data.SqlClient",
        "System.Data.EntityClient",
        "System.Data"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes ODBC provider classes?",
      "answer": "System.Data.Odbc",
      "choices": [
        "System.Data.Odbc",
        "System.Data.Sql",
        "System.Data.ProviderBase",
        "System.Data.SqlTypes"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes OLE DB provider classes?",
      "answer": "System.Data.OleDb",
      "choices": [
        "System.Data.OleDb",
        "System.Data.SqlClient",
        "System.Data.Linq.SqlClient",
        "System.Data.Odbc"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes new base classes and connection factory classes?",
      "answer": "System.Data.ProviderBase",
      "choices": [
        "System.Data.ProviderBase",
        "System.Data.SqlTypes",
        "System.Data.Common",
        "System.Data"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes new generic interfaces and classes for SQL Server data access?",
      "answer": "System.Data.Sql",
      "choices": [
        "System.Data.Sql",
        "System.Data.ProviderBase",
        "System.Data.EntityClient",
        "System.Data.Linq.SqlClient"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes SQL Server provider classes?",
      "answer": "System.Data.SqlClient",
      "choices": [
        "System.Data.SqlClient",
        "System.Data.ProviderBase",
        "System.Data.EntityClient",
        "System.Data.Linq.SqlClient"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which namespace includes SQL Server data types?",
      "answer": "System.Data.SqlTypes",
      "choices": [
        "System.Data.SqlTypes",
        "System.Data.SqlClient",
        "System.Data.Linq.SqlClient",
        "System.Data.Sql"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which tool is a server management console used for logging into servers and accessing databases?",
      "answer": "Server Explorer",
      "choices": [
        "Server Explorer",
        "SSMS",
        "Solution Explorer",
        "Data Connections"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which contains all connections to server and local databases?",
      "answer": "Data Connections",
      "choices": [
        "Data Connections",
        "SQL Server Object Explorer",
        "SQL Server Management Studio",
        "Master Database File (MDF)"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which tool is used to design, connect to databases, browse the schema, and create queries on objects?",
      "answer": "SQL Server Object Explorer",
      "choices": [
        "SQL Server Object Explorer",
        "SQL Server Management Studio",
        "Solution Explorer",
        "Log Database Files (LDF)"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What does SQL Server Management Studio (SSMS) help to deploy, monitor, and upgrade?",
      "answer": "Data-tier components",
      "choices": [
        "Data-tier components",
        "Transact-SQL scripts",
        "Database connections",
        "Local tables"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What file format is used to save a service-based database created in Visual Studio?",
      "answer": ".mdf",
      "choices": [
        ".mdf",
        ".sql",
        ".db",
        ".dat"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which file contains logs for each transaction of a database?",
      "answer": ".ldf",
      "choices": [
        ".ldf",
        ".dat",
        ".sql",
        "Transact-SQL (T-SQL)"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Where do you navigate in Visual Studio to create a table for a local database?",
      "answer": "Tables folder",
      "choices": [
        "Tables folder",
        "Views folder",
        "Functions folder",
        "Tables and schemas"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which language or editor can be used in Visual Studio to create a table?",
      "answer": "T-SQL",
      "choices": [
        "T-SQL",
        "Script File Editor",
        "Visual Query Builder",
        "Table Properties"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What button is clicked to update and save the created table in the database?",
      "answer": "Update button",
      "choices": [
        "Update button",
        "Preview button",
        "Execute button",
        "Synchronize button"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which SQL query is used to create a database?",
      "answer": "CREATE DATABASE db_name;",
      "choices": [
        "CREATE DATABASE db_name;",
        "DROP DATABASE db_name;",
        "DROP TABLE table_name;",
        "ALTER DATABASE db_name;"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which SQL query is used to drop a database?",
      "answer": "DROP DATABASE db_name;",
      "choices": [
        "DROP DATABASE db_name;",
        "CREATE TABLE table_name;",
        "DROP TABLE table_name;",
        "ALTER TABLE db_name;"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is the query for creating a table in SQL?",
      "answer": "CREATE TABLE table_name",
      "choices": [
        "CREATE TABLE table_name",
        "DROP DATABASE db_name;",
        "DROP TABLE table_name;",
        "ALTER TABLE table_name;"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is the SQL query for deleting a table?",
      "answer": "DROP TABLE table_name;",
      "choices": [
        "DROP TABLE table_name;",
        "CREATE DATABASE db_name;",
        "DROP DATABASE db_name;",
        "ALTER TABLE table_name;"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What object is used to establish a connection to the data source?",
      "answer": "Connection object",
      "choices": [
        "Connection object",
        "DataReader object",
        "DataAdapter object",
        "SqlCommand object"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which step involves opening a connection to the specified server?",
      "answer": "SqlConnection",
      "choices": [
        "SqlConnection",
        "DataAdapter",
        "DataReader",
        "Close() method"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What object is created to execute commands on the database?",
      "answer": "SqlCommand",
      "choices": [
        "SqlCommand",
        "DataAdapter",
        "DataReader",
        "Connection object"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which object is used to read data in a forward-only manner?",
      "answer": "DataReader",
      "choices": [
        "DataReader",
        "Command object",
        "SqlConnection",
        "ConnectionString"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which method is called to release resources and close the database connection?",
      "answer": "Close()",
      "choices": [
        "Close()",
        "ExecuteReader()",
        "Dispose()",
        "Commit()"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is the name of the property used to assign the connection string?",
      "answer": "ConnectionString",
      "choices": [
        "ConnectionString",
        "State",
        "Database",
        "CommandText"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What property of SqlConnection returns the name of the SQL Server instance?",
      "answer": "DataSource",
      "choices": [
        "DataSource",
        "State",
        "ConnectionString",
        "SqlTransaction"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which property of SqlConnection returns the name of the connected database?",
      "answer": "Database",
      "choices": [
        "Database",
        "DataSource",
        "ConnectionString",
        "CommandType"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which property of SqlConnection returns the current state of the connection?",
      "answer": "State",
      "choices": [
        "State",
        "Database",
        "ConnectionString",
        "DataAdapter"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What method is used to open a connection in SqlConnection?",
      "answer": "Open()",
      "choices": [
        "Open()",
        "ExecuteReader()",
        "BeginTransaction()",
        "Dispose()"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What should you specify to establish a connection to a database, referring to the computer name?",
      "answer": "Server",
      "choices": [
        "Catalog",
        "Database",
        "Server",
        "Trusted_Connection"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which attribute is used to specify the database that needs to be accessed?",
      "answer": "Database / Initial Catalog",
      "choices": [
        "Trusted_Connection",
        "Server",
        "Database / Initial Catalog",
        "Username"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is used to implement secure connection with the database, and it can be set to true or false?",
      "answer": "Trusted_Connection / Integrated Security",
      "choices": [
        "Server",
        "Username",
        "Trusted_Connection / Integrated Security",
        "Password"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which attribute is used to specify the username in a connection when Integrated Security is false?",
      "answer": "Username",
      "choices": [
        "Password",
        "Server",
        "Username",
        "Database / Initial Catalog"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What attribute is needed to establish a secure connection, along with the username?",
      "answer": "Password / Pwd",
      "choices": [
        "Database / Initial Catalog",
        "Password / Pwd",
        "Server",
        "Trusted_Connection"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What class is used to perform desired processing on the database and allows executing T-SQL or stored procedures?",
      "answer": "SqlCommand",
      "choices": [
        "SqlDataReader",
        "SqlParameterCollection",
        "SqlCommand",
        "SqlRecord"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which method of the SqlCommand class executes the command but does not return output?",
      "answer": "ExecuteNonQuery",
      "choices": [
        "ExecuteScalar",
        "ExecuteReader",
        "ExecuteNonQuery",
        "ExecuteRow"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What method of the SqlCommand class executes the command and returns a DataReader object?",
      "answer": "ExecuteReader",
      "choices": [
        "ExecuteRow",
        "ExecuteNonQuery",
        "ExecuteReader",
        "ExecuteScalar"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which object is a forward-only and read-only cursor for fetching rows from the result set?",
      "answer": "SqlDataReader",
      "choices": [
        "SqlRecord",
        "SqlDataReader",
        "SqlParameterCollection",
        "SqlCommand"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What method of the SqlCommand class executes the command and returns a single row as a SqlRecord object?",
      "answer": "ExecuteRow",
      "choices": [
        "ExecuteScalar",
        "ExecuteNonQuery",
        "ExecuteRow",
        "ExecuteReader"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which method of the SqlCommand class executes the command and returns the first column of the first row in the result set?",
      "answer": "ExecuteScalar",
      "choices": [
        "ExecuteReader",
        "ExecuteRow",
        "ExecuteScalar",
        "ExecuteNonQuery"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which property of the Command object gets or sets the SqlConnection class used by the Command object?",
      "answer": "Connection",
      "choices": [
        "CommandText",
        "Connection",
        "CommandType",
        "CommandText"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which property of the Command object gets or sets the stored procedure or T-SQL statement?",
      "answer": "CommandText",
      "choices": [
        "CommandType",
        "Connection",
        "CommandText",
        "CommandType"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which property of the Command object indicates the way the CommandText should be interpreted?",
      "answer": "CommandType",
      "choices": [
        "Connection",
        "CommandText",
        "CommandType",
        "ExecuteScalar"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What query is used to select specific columns of a table?",
      "answer": "SELECT column1, column2, column3,... FROM table_name",
      "choices": [
        "SELECT column1, column2, column3,... FROM table_name",
        "SELECT * FROM table_name",
        "UPDATE table_name",
        "DELETE FROM table_name"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which SQL command is used to insert rows in a table?",
      "answer": "INSERT INTO",
      "choices": [
        "UPDATE",
        "INSERT INTO",
        "SELECT * FROM",
        "DELETE FROM"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which object refers to a collection of parameters that is connected with SqlCommand?",
      "answer": "SqlParameterCollection",
      "choices": [
        "SqlParameterCollection",
        "SqlDataReader",
        "SqlRecord",
        "SqlCommand"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which method adds a SqlParameter object to the SqlParameterCollection with a name and SQL data type?",
      "answer": "Add()",
      "choices": [
        "AddWithValue()",
        "Add()",
        "AddWithValue()",
        "ExecuteScalar"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which method adds a value to the end of the SqlParameterCollection with the parameter name and value?",
      "answer": "AddWithValue()",
      "choices": [
        "Add()",
        "AddWithValue()",
        "Add()",
        "ExecuteReader"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is the SQL query for inserting data into all columns of a table?",
      "answer": "INSERT INTO table_name VALUES(value1, value2, value3,...)",
      "choices": [
        "INSERT INTO table_name(column1, column2, ...) VALUES(value1, value2,...)",
        "UPDATE table_name SET column1 = value1",
        "INSERT INTO table_name VALUES(value1, value2, value3,...)",
        "SELECT * FROM table_name"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is the SQL query for inserting data into specified column names of a table?",
      "answer": "INSERT INTO table_name (column1, column2,...) VALUES(value1, value2,...)",
      "choices": [
        "INSERT INTO table_name (column1, column2,...) VALUES(value1, value2,...)",
        "INSERT INTO table_name VALUES(value1, value2,...)",
        "UPDATE table_name SET column1 = value1",
        "INSERT INTO table_name(column1, column2) VALUES(value1, value2)"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What command is used to update or modify an existing record in a table?",
      "answer": "UPDATE",
      "choices": [
        "DELETE",
        "INSERT",
        "UPDATE",
        "SELECT"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "Which SQL clause is used to determine the number of records that will be updated in an SQL UPDATE command?",
      "answer": "WHERE",
      "choices": [
        "SELECT",
        "FROM",
        "WHERE",
        "JOIN"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    },
    {
      "question": "What is the query to update data in a table using the SQL UPDATE command?",
      "answer": "UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition",
      "choices": [
        "UPDATE table_name SET column1 = value1, column2 = value2 WHERE condition",
        "SELECT * FROM table_name",
        "DELETE FROM table_name WHERE condition",
        "UPDATE table_name SET column1 = value1 WHERE condition"
      ],
      "reference": "07 Handout 1",
      "term": "Finals"
    }
  ]
}
