{
  "quizInfo": {
    "Subject": "Programming Languages",
    "Term": "Finals",
    "Title": "Prelims - Finals Quiz",
    "LastModified": "03 June 2025",
    "Authors": [
      "Alexander Oro"
    ],
    "References": [
      "All Handouts"
    ]
  },
  "quizData": [
    {
      "question": "What is a named, self-contained block of code designed to execute a specific task?",
      "answer": "subprogram",
      "choices": [
        "loop",
        "condition",
        "method",
        "subprogram"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What allows programmers to group logically related operations and execute them whenever needed?",
      "answer": "subprogram",
      "choices": [
        "variable",
        "subprogram",
        "condition",
        "def"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What is declared in Python using the def keyword followed by a function name, parameter list, and block of statements?",
      "answer": "subprogram",
      "choices": [
        "subprogram",
        "parameter",
        "call stack",
        "activation record"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What supports the divide-and-conquer approach by decomposing a program into manageable units?",
      "answer": "subprogram",
      "choices": [
        "static variables",
        "parameter passing",
        "call stack",
        "subprogram"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What makes each subprogram handle a specific task so the code is easier to understand and maintain?",
      "answer": "Code is easier to understand and maintain",
      "choices": [
        "Testing and debugging are more efficient",
        "Code is easier to understand and maintain",
        "Performance",
        "Memory Management"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What avoids rewriting the same operation multiple times in a program?",
      "answer": "Redundancy is reduced",
      "choices": [
        "Redundancy is reduced",
        "call stack",
        "recursion",
        "Web Development"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What enables isolating subprograms and verifying them independently?",
      "answer": "Testing and debugging are more efficient",
      "choices": [
        "Data Handling",
        "Testing and debugging are more efficient",
        "activation record",
        "pass-by-result"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What makes development smoother by allowing teams to work on different subprograms?",
      "answer": "Collaboration becomes smoother",
      "choices": [
        "Collaboration becomes smoother",
        "Memory Management",
        "Game Development",
        "Data Isolation"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What is a common use of subprograms for operations like square roots and evaluating expressions?",
      "answer": "Mathematical Computation",
      "choices": [
        "Mathematical Computation",
        "User Interface",
        "Web Development",
        "pass-by-result"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What involves subprograms used for data validation, parsing, formatting, and transformation?",
      "answer": "Data Handling",
      "choices": [
        "Recursion",
        "Data Handling",
        "pass-by-reference",
        "Memory Management"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What area includes subprograms that handle button clicks and form submissions?",
      "answer": "User Interface",
      "choices": [
        "User Interface",
        "static variables",
        "Game Development",
        "parameter passing"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What uses backend functions to process requests and return responses?",
      "answer": "Web Development",
      "choices": [
        "Web Development",
        "Data Handling",
        "Redundancy is reduced",
        "Performance"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What exposes functionality like authentication or logging for external reuse?",
      "answer": "Software Application Programming Interface",
      "choices": [
        "Web Development",
        "pass-by-object-reference",
        "Software Application Programming Interface",
        "Testing and debugging are more efficient"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What area of development relies on subprograms for controlling score tracking or level progression?",
      "answer": "Game Development",
      "choices": [
        "Game Development",
        "Recursion",
        "parameter passing",
        "Memory Management"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What Python keyword is used to define or create a subprogram?",
      "answer": "def",
      "choices": [
        "parameter",
        "return",
        "activation record",
        "def"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What signifies the start of a function definition in Python?",
      "answer": "def",
      "choices": [
        "call stack",
        "def",
        "static variables",
        "pass-by-result"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What determines how arguments are transmitted from the caller to the subprogram?",
      "answer": "parameter passing",
      "choices": [
        "parameter passing",
        "loop",
        "activation record",
        "pass-by-result"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What Python mechanism is a mix of pass-by-value and pass-by-reference depending on mutability?",
      "answer": "pass-by-object-reference",
      "choices": [
        "pass-by-reference",
        "pass-by-object-reference",
        "call stack",
        "def"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What copies the value of the actual parameter and changes do not affect the original?",
      "answer": "pass-by-value",
      "choices": [
        "pass-by-value",
        "pass-by-result",
        "static variables",
        "activation record"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What passes a reference to the argument, so changes affect the original?",
      "answer": "pass-by-reference",
      "choices": [
        "pass-by-reference",
        "pass-by-value",
        "recursion",
        "parameter passing"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What acts like a placeholder to be filled and returned as a result?",
      "answer": "pass-by-result",
      "choices": [
        "pass-by-value-result",
        "pass-by-result",
        "call stack",
        "Redundancy is reduced"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What copies a value into the function, and result is copied out after execution?",
      "answer": "pass-by-value-result",
      "choices": [
        "pass-by-result",
        "pass-by-value-result",
        "def",
        "call stack"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What system-managed structure tracks active subprogram calls during execution?",
      "answer": "call stack",
      "choices": [
        "pass-by-result",
        "call stack",
        "parameter passing",
        "Web Development"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What is pushed onto the stack and includes parameters, local variables, and return address?",
      "answer": "activation record",
      "choices": [
        "parameter",
        "call stack",
        "activation record",
        "def"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What variables are allocated at runtime when the subprogram is called?",
      "answer": "Static-Dynamic Variables",
      "choices": [
        "Static-Dynamic Variables",
        "def",
        "pass-by-result",
        "activation record"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What process automatically deallocates local variables and prevents memory leaks?",
      "answer": "Memory Management",
      "choices": [
        "parameter passing",
        "Memory Management",
        "collaboration becomes smoother",
        "pass-by-value-result"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What function type relies on the call stack to track each invocation's local state?",
      "answer": "Recursion",
      "choices": [
        "Recursion",
        "pass-by-reference",
        "call stack",
        "Web Development"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What ensures that variables in different calls donâ€™t interfere unless passed explicitly?",
      "answer": "Data Isolation",
      "choices": [
        "static variables",
        "Memory Management",
        "parameter passing",
        "Data Isolation"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What benefit of stack allocation improves speed due to LIFO structure?",
      "answer": "Performance",
      "choices": [
        "Performance",
        "Redundancy is reduced",
        "Code is easier to understand and maintain",
        "User Interface"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What kind of variable persists across all calls and retains its value?",
      "answer": "static variables",
      "choices": [
        "Static-Dynamic Variables",
        "activation record",
        "static variables",
        "Recursion"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is simulated with immutable types in Python?",
      "answer": "Pass-by-Value",
      "choices": [
        "Pass-by-Reference",
        "Pass-by-Value",
        "Pass-by-Result",
        "Pass-by-Value-Result"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is simulated with mutable types in Python?",
      "answer": "Pass-by-Reference",
      "choices": [
        "Pass-by-Reference",
        "Pass-by-Value",
        "Memory Management",
        "Data Isolation"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is not directly supported in Python?",
      "answer": "Pass-by-Result",
      "choices": [
        "Pass-by-Result",
        "pass-by-object-reference",
        "def",
        "Recursion"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is not natively supported in Python but copies value in and result out?",
      "answer": "Pass-by-Value-Result",
      "choices": [
        "Pass-by-Value-Result",
        "Pass-by-Reference",
        "Code is easier to understand and maintain",
        "Redundancy is reduced"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method supports data protection and does not allow data mutation?",
      "answer": "Pass-by-Value",
      "choices": [
        "Pass-by-Reference",
        "Pass-by-Value",
        "Pass-by-Result",
        "Pass-by-Value-Result"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method allows data mutation but does not support data protection?",
      "answer": "Pass-by-Reference",
      "choices": [
        "Pass-by-Value",
        "Pass-by-Result",
        "Pass-by-Reference",
        "def"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method supports data protection and allows mutation only for output?",
      "answer": "Pass-by-Result",
      "choices": [
        "Pass-by-Reference",
        "Pass-by-Result",
        "Code is easier to understand and maintain",
        "Recursion"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method initially supports data protection and allows reassigned mutation?",
      "answer": "Pass-by-Value-Result",
      "choices": [
        "Memory Management",
        "Pass-by-Result",
        "Pass-by-Value-Result",
        "parameter passing"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is typically used to protect original variables?",
      "answer": "Pass-by-Value",
      "choices": [
        "Data Isolation",
        "Pass-by-Value",
        "pass-by-object-reference",
        "activation record"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is commonly used to modify caller's data in place?",
      "answer": "Pass-by-Reference",
      "choices": [
        "Redundancy is reduced",
        "Pass-by-Reference",
        "Collaboration becomes smoother",
        "User Interface"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is used to return generated or computed results?",
      "answer": "Pass-by-Result",
      "choices": [
        "Memory Management",
        "Pass-by-Result",
        "static variables",
        "Web Development"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
    {
      "question": "What method is used when controlled side-effects are needed?",
      "answer": "Pass-by-Value-Result",
      "choices": [
        "Pass-by-Reference",
        "Recursion",
        "Pass-by-Value-Result",
        "Game Development"
      ],
      "reference": "Subprograms",
      "term": "Finals"
    },
     {
      "question": "What determines the flow of execution of instructions in a program?",
      "answer": "control structure",
      "choices": [
        "sequential structure",
        "control structure",
        "selection structure",
        "iteration structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What allows programs to make decisions, perform repeated tasks, and respond dynamically to conditions?",
      "answer": "control structure",
      "choices": [
        "sequential structure",
        "control structure",
        "selection structure",
        "iteration structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "How many types of control structures mentioned in the handout?",
      "answer": "four types",
      "choices": [
        "four types",
        "five types",
        "three types",
        "decision types"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What is the simplest form of control where statements are executed in order?",
      "answer": "sequential structure",
      "choices": [
        "sequential structure",
        "jump structure",
        "selection structure",
        "iteration structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What is used when tasks must be performed in a fixed sequence with no deviation?",
      "answer": "sequential structure",
      "choices": [
        "sequential structure",
        "jump structure",
        "selection structure",
        "iteration structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure simulates a system startup where messages are displayed in order?",
      "answer": "sequential structure",
      "choices": [
        "sequential structure",
        "jump structure",
        "selection structure",
        "iteration structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure allows a program to choose between alternative paths of execution?",
      "answer": "selection structure",
      "choices": [
        "sequential structure",
        "jump structure",
        "selection structure",
        "iteration structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure is commonly applied in scenarios requiring branching logic?",
      "answer": "selection structure",
      "choices": [
        "sequential structure",
        "jump structure",
        "selection structure",
        "iteration structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword begins a conditional block that runs if the condition is true?",
      "answer": "if-else",
      "choices": [
        "if-else",
        "if-elif-else",
        "break",
        "continue"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword is used when the condition is false in a conditional block?",
      "answer": "if-else",
      "choices": [
        "if-else",
        "if-elif-else",
        "break",
        "continue"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What categorizes a grade into excellent, satisfactory, or needs improvement?",
      "answer": "if-elif-else",
      "choices": [
        "if-else",
        "if-elif-else",
        "break",
        "continue"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword is short for \"else if\" and evaluates additional conditions?",
      "answer": "if-elif-else",
      "choices": [
        "if-else",
        "if-elif-else",
        "break",
        "continue"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure repeats a block of code as long as a condition is true?",
      "answer": "iteration structure",
      "choices": [
        "iteration structure",
        "selection structure",
        "sequential structure",
        "control structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure is used to traverse data, generate reports, or retry attempts?",
      "answer": "iteration structure",
      "choices": [
        "iteration structure",
        "selection structure",
        "sequential structure",
        "control structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword begins a counting loop, like printing attempts?",
      "answer": "for loop",
      "choices": [
        "break",
        "for loop",
        "while loop",
        "if-else"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword starts a loop that continues as long as a condition is true?",
      "answer": "while loop",
      "choices": [
        "break",
        "for loop",
        "while loop",
        "if-else"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure alters the flow explicitly using break, continue, or return?",
      "answer": "jump structure",
      "choices": [
        "selection structure",
        "looping",
        "jump structure",
        "selection structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What provides exceptional flow control, like exiting loops early?",
      "answer": "jump structure",
      "choices": [
        "selection structure",
        "looping",
        "jump structure",
        "selection structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure interrupts or redirects the normal flow using statements like break?",
      "answer": "branching",
      "choices": [
        "decision-making",
        "sequential structure",
        "branching",
        "looping"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What is used to exit a loop early when a specific condition is met?",
      "answer": "break",
      "choices": [
        "continue",
        "jump structure",
        "for loop",
        "break"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword skips the current iteration and continues with the next one?",
      "answer": "continue",
      "choices": [
        "continue",
        "break",
        "if-else",
        "return"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What is the action of making choices based on conditions within a program?",
      "answer": "decision-making",
      "choices": [
        "decision-making",
        "sequential structure",
        "branching",
        "looping"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What refers to executing the same code multiple times while a condition is true?",
      "answer": "looping",
      "choices": [
        "decision-making",
        "sequential structure",
        "branching",
        "looping"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What control structure is used in a program that prints \"Initializing system...\" then \"System ready.\" in order?",
      "answer": "sequential structure",
      "choices": [
        "iteration structure",
        "sequential structure",
        "branching",
        "selection structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What control structure is used in the area calculator that multiplies length and width after getting inputs?",
      "answer": "sequential structure",
      "choices": [
        "jump structure",
        "sequential structure",
        "decision-making",
        "if-else"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What control structure checks if temperature > 37 before printing \"Fever detected\"?",
      "answer": "selection structure",
      "choices": [
        "loop structure",
        "iteration structure",
        "selection structure",
        "jump structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What specific structure is shown in the code using if temperature > 37 and else?",
      "answer": "if-else",
      "choices": [
        "if-elif-else",
        "if-else",
        "break",
        "continue"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What code structure prints “Excellent” when grade >= 90, “Satisfactory” if grade >= 75, and “Needs Improvement” otherwise?",
      "answer": "if-elif-else",
      "choices": [
        "sequential structure",
        "if-elif-else",
        "while loop",
        "continue"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword is used in the grading system to evaluate a second condition if the first one fails?",
      "answer": "elif",
      "choices": [
        "elif",
        "return",
        "break",
        "if"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What loop is used in the password program that runs until the user types \"admin123\"?",
      "answer": "while loop",
      "choices": [
        "for loop",
        "while loop",
        "break",
        "return"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What structure is used when if i == 4: triggers break in a loop?",
      "answer": "jump structure",
      "choices": [
        "selection structure",
        "loop structure",
        "sequential structure",
        "jump structure"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword is used in the loop that skips printing number 3 and continues the loop?",
      "answer": "continue",
      "choices": [
        "break",
        "continue",
        "if-else",
        "elif"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What keyword causes a loop to exit when the value of i becomes 4?",
      "answer": "break",
      "choices": [
        "break",
        "continue",
        "if-else",
        "for loop"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
    {
      "question": "What term refers to using \"for i in range(10):\" then using if i == 4: break?",
      "answer": "branching",
      "choices": [
        "decision-making",
        "sequential structure",
        "branching",
        "looping"
      ],
      "reference": "Control Structures",
      "term": "Finals"
    },
     {
      "question": "What is a formal notation system or instructions for writing computer programs and other software applications?",
      "answer": "programming languages",
      "choices": [
        "data structures",
        "algorithms",
        "operating systems",
        "programming languages"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "Who invented the first machine algorithm, leading to the idea of programming languages?",
      "answer": "Ada Lovelace",
      "choices": [
        "Konrad Zuse",
        "Kathleen Booth",
        "Alick Glennie Marilag",
        "Ada Lovelace"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was invented in 1843 by Ada Lovelace?",
      "answer": "Machine Language",
      "choices": [
        "Plankalkül",
        "Fortran",
        "LISP",
        "Machine Language"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What was the first high-level computer programming language ever developed by a German scientist, Konrad Zuse?",
      "answer": "Plankalkül",
      "choices": [
        "Machine Language",
        "BASIC",
        "COBOL",
        "Plankalkül"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language included mathematical expressions, showing the current relationships between program variables, and the ability to store codes that enabled engineers to carry out routine, repetitive tasks more efficiently and quickly?",
      "answer": "Plankalkül",
      "choices": [
        "Machine Language",
        "BASIC",
        "COBOL",
        "Plankalkül"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was developed by Kathleen Booth to simplify machine code for writing instructions for processors?",
      "answer": "Assembly Language",
      "choices": [
        "Objective-C",
        "Machine Language",
        "BASIC",
        "Assembly Language"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What was implemented by William Schmitt to improve the operations of the BINAC and UNIVAC computers?",
      "answer": "Shortcode",
      "choices": [
        "Autocode",
        "Fortran",
        "Plankalkül",
        "Shortcode"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What term did Alick Glennie coin to refer to a set of programming languages developed for the Mark 1 computer?",
      "answer": "Autocode",
      "choices": [
        "Fortran",
        "Shortcode",
        "Assembly Language",
        "Autocode"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language was created by John Backus to shorten the process of programming and make computer programming more accessible?",
      "answer": "Fortran",
      "choices": [
        "ALGOL",
        "LISP",
        "Machine Language",
        "Fortran"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language is still used today in supercomputers and for scientific and mathematical computations?",
      "answer": "Fortran",
      "choices": [
        "Autocode",
        "Shortcode",
        "LISP",
        "Fortran"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was created by American and European computer scientists and became the origin point for other languages like Pascal, Java, C, and C++?",
      "answer": "ALGOL",
      "choices": [
        "LISP",
        "BASIC",
        "C",
        "ALGOL"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language did John McCarthy create for his artificial intelligence (AI) applications?",
      "answer": "LISP",
      "choices": [
        "ALGOL",
        "Fortran",
        "Plankalkül",
        "LISP"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What is one of the oldest computer programming languages still used today by AI companies like Boeing and Genworks?",
      "answer": "LISP",
      "choices": [
        "ALGOL",
        "Fortran",
        "Plankalkül",
        "LISP"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What does COBOL stand for?",
      "answer": "Common Business Oriented Language",
      "choices": [
        "Common Of Beef Overload",
        "Cool Old Basic Language",
        "Common Business Oriented Language",
        "Common Basic Oriented Language"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was developed and designed by Dr. Grace Murray Hopper for business computer programs?",
      "answer": "COBOL",
      "choices": [
        "ALGOL",
        "SQL",
        "Pascal",
        "COBOL"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was estimated to be in use by over 100 million people and is still widely used in today's banking systems?",
      "answer": "COBOL",
      "choices": [
        "ALGOL",
        "SQL",
        "C++",
        "COBOL"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was created as a computer programming language for beginners by Dartmouth College students?",
      "answer": "BASIC",
      "choices": [
        "ALGOL",
        "SQL",
        "C++",
        "BASIC"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What does BASIC stand for?",
      "answer": "Beginner's All Purpose Symbolic Instruction Code",
      "choices": [
        "Beginner's All Purpose Syrup In Cream",
        "Baffling And Slightly Incomprehensible Code",
        "Baby's All-purpose Symbolic Instruction Code",
        "Beginner's All Purpose Symbolic Instruction Code"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language, further developed by Bill Gates and Paul Allen, became Microsoft's first commercially successful product?",
      "answer": "BASIC",
      "choices": [
        "ALGOL",
        "Fortran",
        "Plankalkül",
        "BASIC"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was developed by Niklaus Wirth and named after the famed mathematician Blaise Pascal?",
      "answer": "Pascal",
      "choices": [
        "C",
        "SQL",
        "Python",
        "Pascal"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was endorsed by Apple due to its streamlined and straightforward process?",
      "answer": "Pascal",
      "choices": [
        "Swift",
        "Fortran",
        "Plankalkül",
        "Pascal"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language, developed by Dennis Ritchie at Bell Telephone Laboratories as a successor to the B language, is named after its predecessor?",
      "answer": "C",
      "choices": [
        "C++",
        "Objective-C",
        "Plankalkül",
        "C"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language is recommended for creating embedded system drivers and applications, and serves as the basis for languages like C#, Java, JavaScript, Perl, PHP, and Python?",
      "answer": "C",
      "choices": [
        "C++",
        "Objective-C",
        "Plankalkül",
        "C"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language was developed by Raymond Boyce and Donald Chamberlain and was first called SEQUEL?",
      "answer": "SQL",
      "choices": [
        "C++",
        "Java",
        "PHP",
        "SQL"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language is used for modifying, viewing, and altering information in databases?",
      "answer": "SQL",
      "choices": [
        "C++",
        "Java",
        "PHP",
        "SQL"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language, an extension of C, was developed by Bjarne Stroustrup and incorporates features like templates, classes, and virtual functions?",
      "answer": "C++",
      "choices": [
        "C++",
        "Objective-C",
        "Plankalkül",
        "C"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language, created by Brad Cox and Tom Love, is the primary language used for developing applications for Apple's iOS, macOS, and iPadOS operating systems?",
      "answer": "Objective-C",
      "choices": [
        "C++",
        "Objective-C",
        "Plankalkül",
        "C"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What general-purpose, high-level programming language was created by Guido van Rossum as a support language for software developers, build control and management, testing, and various other tasks?",
      "answer": "Python",
      "choices": [
        "Visual Basic",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language, created by Microsoft, allows users to drag and drop sections of code simultaneously?",
      "answer": "Visual Basic",
      "choices": [
        "Visual Basic",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language, known for its user-friendly interface and allowing users to easily modify code through features like drop-down menus, was developed by Microsoft?",
      "answer": "Visual Basic",
      "choices": [
        "Visual Basic",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language was created by James Gosling for a software project involving interactive television?",
      "answer": "Java",
      "choices": [
        "PHP",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language is considered one of the world's most famous and popular languages for coding web applications?",
      "answer": "Java",
      "choices": [
        "PHP",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What multiplatform, object-oriented, and network-centric programming language can also be used as a platform?",
      "answer": "Java",
      "choices": [
        "PHP",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What scripting language, created by Brendan Eich, is primarily used in websites?",
      "answer": "JavaScript",
      "choices": [
        "PHP",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What programming language, in addition to its primary use in web development, is also employed for enhancing PDF documents and creating desktop widgets?",
      "answer": "JavaScript",
      "choices": [
        "PHP",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What scripting language, developed by Rasmus Lerdorf, is commonly used for server-side web development?",
      "answer": "PHP",
      "choices": [
        "PHP",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What language, used by sites like Facebook and WordPress, was originally called Personal Home Page but is now known as Hypertext Preprocessor?",
      "answer": "PHP",
      "choices": [
        "PHP",
        "Java",
        "JavaScript",
        "Python"
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When did Ada Lovelace invent the first machine algorithm?",
      "answer": 1843,
      "choices": [
        "1940s",
        1949,
        1952,
        1843
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Plankalkül developed by Konrad Zuse?",
      "answer": "1940s",
      "choices": [
        "1940s",
        1949,
        1952,
        1843
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When did Kathleen Booth write the first assembly language?",
      "answer": 1949,
      "choices": [
        1952,
        1991,
        1949,
        1959
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Shortcode implemented by William Schmitt?",
      "answer": 1949,
      "choices": [
        1957,
        1959,
        1952,
        1949
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Autocode coined by Alick Glennie?",
      "answer": 1952,
      "choices": [
        1957,
        1949,
        1958,
        1952
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Fortran created by John Backus?",
      "answer": 1957,
      "choices": [
        1958,
        "1940s",
        1970,
        1957
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was ALGOL created by American and European computer scientists?",
      "answer": 1958,
      "choices": [
        1959,
        1957,
        1843,
        1958
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was LISP created by John McCarthy?",
      "answer": 1958,
      "choices": [
        1959,
        1957,
        1843,
        1958
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was COBOL created by Dr. Grace Murray Hopper?",
      "answer": 1959,
      "choices": [
        1959,
        1957,
        1843,
        1958
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was BASIC created as a computer programming language for beginners?",
      "answer": 1964,
      "choices": [
        1959,
        1957,
        1843,
        1964
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Pascal developed by Niklaus Wirth?",
      "answer": 1970,
      "choices": [
        1957,
        1995,
        1991,
        1970
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was the C language developed by Dennis Ritchie?",
      "answer": 1972,
      "choices": [
        1957,
        1995,
        1991,
        1972
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was the SQL developed by Raymond Boyce and Donald Chamberlain?",
      "answer": 1972,
      "choices": [
        1957,
        1995,
        1991,
        1972
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was C++ released by Bjarne Stroustrup?",
      "answer": 1983,
      "choices": [
        1991,
        1995,
        1970,
        1983
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Objective-C created by Brad Cox and Tom Love?",
      "answer": 1983,
      "choices": [
        1991,
        1995,
        1970,
        1983
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Python created by Guido Van Rossum?",
      "answer": 1991,
      "choices": [
        1991,
        1995,
        1970,
        1983
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Visual Basic created by Microsoft?",
      "answer": 1991,
      "choices": [
        1991,
        1995,
        1970,
        1983
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was Java developed by James Gosling?",
      "answer": 1995,
      "choices": [
        1991,
        1995,
        1970,
        1983
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was JavaScript developed by Brendan Eich?",
      "answer": 1995,
      "choices": [
        1991,
        1995,
        1970,
        1983
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "When was PHP developed by Rasmus Lerdorf?",
      "answer": 1995,
      "choices": [
        1991,
        1995,
        1970,
        1983
      ],
      "reference": "Milestones in Programming Langues",
      "term": "Prelims"
    },
    {
      "question": "What term describes the different areas of computer use that have led to the development of diverse programming languages with specialized goals?",
      "answer": "Programming Domains",
      "choices": [
        "Programming Domains",
        "Expansion Domain",
        "Domain Expansion",
        "Programming Languages"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What was the primary domain for which the first digital computers, developed in the late 1940s and early 1950s, were invented and used?",
      "answer": "Scientific Applications",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What type of applications, requiring numerous floating-point arithmetic computations and utilizing data structures like arrays and matrices along with control structures like counting loops and selection, were prominent in the early days of computing?",
      "answer": "Scientific Applications",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What type of applications, where efficiency is a primary concern, led to the development and early adoption of languages like Fortran?",
      "answer": "Scientific Applications",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What domain of computer use emerged in the 1950s, leading to the development of specialized computers and programming languages?",
      "answer": "Business Applications",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What domain of computer use saw the development of COBOL, the first successful high-level language designed specifically for its needs, starting in 1960",
      "answer": "Business Applications",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What field of computer science is characterized by the use of symbolic computation, manipulating names rather than numbers, and often employs linked lists of data rather than arrays?",
      "answer": "Aritificial Intelligence (AI)",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What field of computer science, requiring flexibility in programming, saw LISP as its first widely used language before 1990?",
      "answer": "Aritificial Intelligence (AI)",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "While LISP was an early language of choice, what other programming language has become increasingly popular for use in Artificial Intelligence applications more recently?",
      "answer": "Python",
      "choices": [
        "JavaScript",
        "Java",
        "PHP",
        "Python"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What area of software development utilizes a range of languages, from markup languages like HTML to general-purpose programming languages like Java, to support the World Wide Web?",
      "answer": "Web Software",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What type of software development necessitates the integration of computational capabilities, often through embedded programming code within HTML documents, to create dynamic web content?",
      "answer": "Web Software",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What area of software development often employs scripting languages like JavaScript or PHP embedded within HTML to achieve dynamic functionality?",
      "answer": "Web Software",
      "choices": [
        "Business Applications",
        "Aritificial Intelligence (AI)",
        "Web Software",
        "Scientific Applications"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What term refers to the collection of tools used in software development?",
      "answer": "Programming Environments",
      "choices": [
        "Programming Languages",
        "Programming Domains",
        "Programming Language Evaluation",
        "Programming Environments"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What term describes a collection of software development tools, ranging from a basic set of a file system, text editor, linker, and compiler, to a comprehensive suite of integrated tools accessible through a unified user interface?",
      "answer": "Programming Environments",
      "choices": [
        "Programming Languages",
        "Programming Domains",
        "Programming Language Evaluation",
        "Programming Environments"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What code editor, designed for building and debugging modern web and cloud applications, has been redefined and optimized by Microsoft?",
      "answer": "Microsoft Visual Studio Code",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What lightweight but powerful source code editor, developed by Microsoft, runs on Windows, macOS, and Linux desktops?",
      "answer": "Microsoft Visual Studio Code",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What code editor, featuring built-in support for JavaScript, TypeScript, and Node.js, also boasts a rich ecosystem of extensions for numerous other languages like Java, Python, C++, C#, PHP, and .NET?",
      "answer": "Microsoft Visual Studio Code",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What free and open-source integrated development environment (IDE) supports the development of desktop, mobile, and web applications?",
      "answer": "NetBeans",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What IDE offers comprehensive support for JDK 7 technologies and the latest Java enhancements?",
      "answer": "NetBeans",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What IDE, in addition to supporting Java, also supports JavaScript, Ruby, and PHP, and like Visual Studio, acts as both a development environment and a framework by providing common code components for applications?",
      "answer": "NetBeans",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What integrated development environment (IDE) includes a text editor, message area, text console, toolbar, and menus, and is specifically designed to connect to Arduino boards for uploading programs and communication?",
      "answer": "Arduino IDE",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What visual programming editor, developed by Google and used by many popular coding education programs, employs drag-and-drop blocks for code creation?",
      "answer": "Blockly",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What visual programming editor allows users to define block connections and input fields, while the editor itself handles the complexities of rendering, dragging, and connecting those blocks?",
      "answer": "Blockly",
      "choices": [
        "NetBeans",
        "Arduino IDE",
        "Blockly",
        "Microsoft Visual Studio Code"
      ],
      "reference": "Programming Domains and Environments",
      "term": "Prelims"
    },
    {
      "question": "What set of criteria helps analyze the impact of programming languages on the software development process, particularly in areas like maintenance?",
      "answer": "Programming Language Evaluation Criteria",
      "choices": [
        "Programming Language Maintenance Criteria",
        "Programming Language Debug Criteria",
        "Programming Language Compilation Criteria",
        "Programming Language Evaluation Criteria"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What programming language evaluation criterion refers to the ease with which programs can be read and understood?",
      "answer": "Readability",
      "choices": [
        "Writability",
        "Reliability",
        "Oversimplicity",
        "Readability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What programming language evaluation criterion, crucial for ease of maintenance, has become a major measure of program and programming language quality?",
      "answer": "Readability",
      "choices": [
        "Writability",
        "Reliability",
        "Oversimplicity",
        "Readability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What programming language evaluation criterion must be considered in the context of the problem domain, as using an unsuitable language can make a program unnatural, convoluted, and difficult to understand?",
      "answer": "Readability",
      "choices": [
        "Writability",
        "Reliability",
        "Oversimplicity",
        "Readability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What characteristic, contributing to the readability of a programming language, refers to the overall ease of learning due to a smaller number of basic constructs?",
      "answer": "Simplicity",
      "choices": [
        "Orthogonality",
        "Syntax Design",
        "Form and Meaning",
        "Simplicity"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is a scenario of more than one way to accomplish a particular operation considered to be a problem in readability?",
      "answer": "Feature Multiplicity",
      "choices": [
        "Operator Overloading",
        "Oversimplicity",
        "Orthogonality",
        "Feature Multiplicity"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is a scenario wherein a single operator symbol has more than one meaning, potentially leading to confusion if not used carefully?",
      "answer": "Operator Overloading",
      "choices": [
        "Operator Overloading",
        "Oversimplicity",
        "Orthogonality",
        "Feature Multiplicity"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is a scenario wherein the language is too simple to the point of lacking more complex statements and less obvious program structure considered to be a problem in readability?",
      "answer": "Oversimplicity",
      "choices": [
        "Operator Overloading",
        "Oversimplicity",
        "Orthogonality",
        "Feature Multiplicity"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What characteristic of a programming language, related to readability, refers to the ability to change one aspect of a program without causing unintended side effects in other parts?",
      "answer": "Orthogonality",
      "choices": [
        "Simplicity",
        "Data Types",
        "Orthogonality",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What characteristic concerns the independence of components in a larger system and how a small set of primitive constructs can be combined in a small number of ways to build the control and data structure of the language?",
      "answer": "Orthogonality",
      "choices": [
        "Simplicity",
        "Data Types",
        "Orthogonality",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What programming language characteristic, exemplified by the ability of pointers to reference any specific data type, ensures that language features can be used in a consistent and predictable way without arbitrary restrictions?",
      "answer": "Orthogonality",
      "choices": [
        "Simplicity",
        "Special Words",
        "Orthogonality",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is the name of the programming language characteristic that describes the ability of pointers, for example, to point to any specific type in the language, allowing for the definition of many potentially useful user-defined data structures?",
      "answer": "Orthogonality",
      "choices": [
        "Simplicity",
        "Special Words",
        "Orthogonality",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What programming language design principle leads to fewer exceptions in language rules, resulting in greater regularity and making the language easier to learn, read, and understand?",
      "answer": "Orthogonality",
      "choices": [
        "Simplicity",
        "Data Types",
        "Orthogonality",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What aspect of a programming language, specifically the availability of features for defining data types and data structures, significantly contributes to readability?",
      "answer": "Data Types",
      "choices": [
        "Special Words",
        "Data Types",
        "Form and Meaning",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What aspect of a programming language, such as the absence of a Boolean type in C, can hinder readability when, for example, a numeric type is used for an indicator flag?",
      "answer": "Data Types",
      "choices": [
        "Simplicity",
        "Data Types",
        "Form and Meaning",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What aspect of a programming language, specifically the form of its elements, influences the readability of programs?",
      "answer": "Syntax Design",
      "choices": [
        "Simplicity",
        "Data Types",
        "Orthogonality",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What syntactic design element involves the use of matching pairs of words or symbols to form groups within a program?",
      "answer": "Special Words",
      "choices": [
        "Special Words",
        "Data Types",
        "Form and Meaning",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What syntactic design element can diminish readability because statement groups are always terminated in the same way, making it difficult to determine which group is being ended when an end or a right brace appears?",
      "answer": "Special Words",
      "choices": [
        "Special Words",
        "Data Types",
        "Form and Meaning",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What are the two aspects of a programming language, where semantics must follow directly from syntax, that can be designed to have their appearance partially specify their purpose, which helps readability?",
      "answer": "Form and Meaning",
      "choices": [
        "Special Words",
        "Data Types",
        "Form and Meaning",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What two aspects of a programming language are exemplified by the C keyword \"static,\" where its meaning (semantics) changes depending on the context of its appearance (syntax), potentially hindering readability?",
      "answer": "Form and Meaning",
      "choices": [
        "Special Words",
        "Data Types",
        "Form and Meaning",
        "Syntax Design"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is the measure of how easily a language can be used to create programs for a chosen problem domain called?",
      "answer": "Writability",
      "choices": [
        "Writability",
        "Reliability",
        "Copybility",
        "Readability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is the characteristic of a programming language that describes how easily it can be used to create programs for a specific purpose, but which should not be compared across languages designed for different purposes?",
      "answer": "Writability",
      "choices": [
        "Writability",
        "Reliability",
        "Simplicity",
        "Readability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What characteristic of programming languages, exemplified by the differences between Visual Basic (ideal for GUI programs) and C (ideal for systems programs), highlights the importance of considering the intended application when evaluating a language?",
      "answer": "Writability",
      "choices": [
        "Writability",
        "Reliability",
        "Simplicity",
        "Readability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What two characteristics that contribute to the writability of a programming language might be negatively affected by a large number of different constructs, potentially leading to confusion, misuse, and disuse of some features?",
      "answer": "Simplicity and Orthogonality",
      "choices": [
        "Simplicity and Orthogonality",
        "Aliasing and Readability",
        "Expressivity and Readability",
        "Readability and Writability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What two characteristics that contribute to the writability of a programming language can be negatively affected by too much orthogonality, potentially leading to undetected errors and code absurdities due to the legality of any combination of primitives?",
      "answer": "Simplicity and Orthogonality",
      "choices": [
        "Simplicity and Orthogonality",
        "Aliasing and Readability",
        "Expressivity and Readability",
        "Readability and Writability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What characteristic of a programming language, like the count++ notation in C, means having convenient operators for concise code?",
      "answer": "Expressivity",
      "choices": [
        "Simplicity and Orthogonality",
        "Reliability",
        "Type Checking",
        "Expressivity"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What characteristic of a program is met if it performs to its specifications under all conditions?",
      "answer": "Reliability",
      "choices": [
        "Writability",
        "Reliability",
        "Simplicity",
        "Readability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What process tests for type errors in a program, either by the compiler or during program execution?",
      "answer": "Type Checking",
      "choices": [
        "Readability and Writability",
        "Exception Handling",
        "Aliasing",
        "Type Checking"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is more desirable to be done at compile time rather than runtime because it is expensive?",
      "answer": "Type Checking",
      "choices": [
        "Readability and Writability",
        "Exception Handling",
        "Aliasing",
        "Type Checking"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What is the ability of a program to intercept runtime errors, take corrective measures, and then continue?",
      "answer": "Exception Handling",
      "choices": [
        "Readability and Writability",
        "Exception Handling",
        "Aliasing",
        "Type Checking"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What dangerous feature in programming occurs when two or more distinct names can access the same memory cell?",
      "answer": "Aliasing",
      "choices": [
        "Readability and Writability",
        "Exception Handling",
        "Aliasing",
        "Type Checking"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What two characteristics of a programming language can impact reliability because a program that is difficult to read can also be difficult to write and modify?",
      "answer": "Readability and Writability",
      "choices": [
        "Simplicity and Orthogonality",
        "Aliasing and Readability",
        "Expressivity and Readability",
        "Readability and Writability"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What can lead to unnatural and potentially incorrect program structures if a language does not support clear ways to express algorithms?",
      "answer": "Readability and Writability",
      "choices": [
        "Readability and Writability",
        "Exception Handling",
        "Aliasing",
        "Type Checking"
      ],
      "reference": "Programming Language Evaluation Criteria",
      "term": "Prelims"
    },
    {
      "question": "What are the two main aspects of a programming language that are studied to understand its structure and meaning?",
      "answer": "syntax and semantics",
      "choices": [
        "alphabet",
        "lexis",
        "language",
        "syntax and semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What term refers to the set of symbols used to build words in a particular language?",
      "answer": "alphabet",
      "choices": [
        "alphabet",
        "lexis",
        "language",
        "syntax and semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is the term for the set of words that a language offers its users, similar to a dictionary?",
      "answer": "lexis",
      "choices": [
        "alphabet",
        "lexis",
        "language",
        "syntax and semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is defined as a set of strings of characters from an alphabet, encompassing both natural languages like English and artificial languages like Python?",
      "answer": "language",
      "choices": [
        "alphabet",
        "lexis",
        "language",
        "syntax and semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What defines the meaning of the various combinations of symbols used in programming?",
      "answer": "syntax",
      "choices": [
        "alphabet",
        "lexis",
        "semantics",
        "syntax"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What describes which strings of characters comprise a valid program?",
      "answer": "syntax",
      "choices": [
        "alphabet",
        "lexis",
        "semantics",
        "syntax"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is the form of expressions, statements, and program units in a programming language?",
      "answer": "syntax",
      "choices": [
        "alphabet",
        "lexis",
        "semantics",
        "syntax"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What can prevent a computer from running source code if a programmer doesn't carefully follow the language's rules?",
      "answer": "syntax error",
      "choices": [
        "source code",
        "language",
        "lexis",
        "syntax error"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is a program written in a high-level programming language called?",
      "answer": "source code",
      "choices": [
        "source code",
        "language",
        "lexis",
        "syntax error"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are reserved words that have a special meaning in the language called?",
      "answer": "keywords",
      "choices": [
        "operators",
        "punctuation",
        "identifiers",
        "keywords"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are examples of keywords?",
      "answer": "if, else, for, and while",
      "choices": [
        "arithmetic operators and logical operators",
        "num, digit",
        "functions",
        "if, else, for, and while"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are symbols that perform operations on variables and values called?",
      "answer": "operators",
      "choices": [
        "operators",
        "punctuation",
        "identifiers",
        "keywords"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are some examples of operators?",
      "answer": "arithmetic operators and logical operators",
      "choices": [
        "arithmetic operators and logical operators",
        "num, digit",
        "functions",
        "if, else, for, and while"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What helps structure the program and indicate the end of statements or encapsulate blocks of code?",
      "answer": "punctuation",
      "choices": [
        "operators",
        "punctuation",
        "identifiers",
        "keywords"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are names that identify user-defined items such as variables, functions, and arrays?",
      "answer": "identifiers",
      "choices": [
        "operators",
        "punctuation",
        "identifiers",
        "keywords"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is a natural notation for describing syntax?",
      "answer": "BNF (Backus-Naur Form)",
      "choices": [
        "BNF rules",
        "Static semantic",
        "Dynamic semantics",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is the most popular method of concisely describing programming language syntax?",
      "answer": "BNF (Backus-Naur Form)",
      "choices": [
        "BNF rules",
        "Static semantic",
        "Dynamic semantics",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is considered a metalanguage for programming languages?",
      "answer": "BNF (Backus-Naur Form)",
      "choices": [
        "BNF rules",
        "Static semantic",
        "Dynamic semantics",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is a language or set of terms used to describe another language?",
      "answer": "metalanguage",
      "choices": [
        "languagelanguage",
        "metadata",
        "alphabet",
        "metalanguage"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are strings that must exactly match specific items in the input called?",
      "answer": "terminals",
      "choices": [
        "nonterminals",
        "rules",
        "station",
        "terminals"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are symbols that will be replaced by a concrete value called?",
      "answer": "nonterminals",
      "choices": [
        "nonterminals",
        "rules",
        "station",
        "terminals"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are conventions of terminals and nonterminals that define how the elements relate?",
      "answer": "rules",
      "choices": [
        "nonterminals",
        "rules",
        "station",
        "terminals"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are strings like ''def'', ''return'', '':'' and '';'' called in BNF notation?",
      "answer": "terminals",
      "choices": [
        "nonterminals",
        "rules",
        "station",
        "terminals"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are symbols like ''＜letter>'' and ''digit'' called in BNF notation?",
      "answer": "nonterminals",
      "choices": [
        "nonterminals",
        "rules",
        "station",
        "terminals"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are conventions like ''＜letter>::= ''a'''' called in BNF notation?",
      "answer": "rules",
      "choices": [
        "nonterminals",
        "rules",
        "station",
        "terminals"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are created by combining terminals and nonterminals?",
      "answer": "BNF Rules",
      "choices": [
        "BNF rules",
        "Static semantic",
        "BNF Grammar",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What are the core components of BNF grammar?",
      "answer": "BNF Rules",
      "choices": [
        "BNF rules",
        "Static semantic",
        "BNF Grammar",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What can be used to specify the grammar of a language?",
      "answer": "BNF Rules",
      "choices": [
        "BNF rules",
        "Static semantic",
        "BNF Grammar",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is also called production rules?",
      "answer": "BNF Rules",
      "choices": [
        "BNF rules",
        "Static semantic",
        "BNF Grammar",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is a set of BNF rules called",
      "answer": "BNF Grammar",
      "choices": [
        "BNF rules",
        "Static semantic",
        "BNF Grammar",
        "BNF (Backus-Naur Form)"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What appears if Python code fails to fulfill the rules defined in its grammar?",
      "answer": "Syntax Error",
      "choices": [
        "BNF rules",
        "BNF (Backus-Naur Form)",
        "BNF Grammar",
        "Syntax Error"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is a tree representation of the syntactic structure of the source code called?",
      "answer": "Syntax Tree",
      "choices": [
        "Syntax Error",
        "BNF Rules",
        "BNF Grammar",
        "Syntax Tree"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is an Abstract Syntax Tree also known as?",
      "answer": "Syntax Tree",
      "choices": [
        "Syntax Error",
        "BNF Rules",
        "BNF Grammar",
        "Syntax Tree"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is the meaning of expressions, statements, and program units called?",
      "answer": "semantic",
      "choices": [
        "syntax",
        "symbol",
        "rules",
        "semantic"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is concerned with the meaning behind the structure of a programming language?",
      "answer": "semantic",
      "choices": [
        "syntax",
        "symbol",
        "rules",
        "semantic"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What involves rules that are checked at compile time, such as type checking and scope resolution?",
      "answer": "static semantics",
      "choices": [
        "syntax",
        "semantics",
        "dynamic semantics",
        "static semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What ensures that certain errors are caught before the program runs?",
      "answer": "static semantics",
      "choices": [
        "syntax",
        "semantics",
        "dynamic semantics",
        "static semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What kind of semantics are exemplified by a language flagging an error if a variable is used without being declared?",
      "answer": "static semantics",
      "choices": [
        "syntax",
        "semantics",
        "dynamic semantics",
        "static semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What refers to the behavior of a program when it is run?",
      "answer": "dynamic semantics",
      "choices": [
        "syntax",
        "semantics",
        "dynamic semantics",
        "static semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What includes the execution of expressions, control structures, and manipulating data?",
      "answer": "dynamic semantics",
      "choices": [
        "syntax",
        "semantics",
        "dynamic semantics",
        "static semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What defines how the state of a program changes as it executes?",
      "answer": "dynamic semantics",
      "choices": [
        "formal semantics",
        "semantics",
        "dynamic semantics",
        "static semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is often used to define a programming language's semantics?",
      "answer": "formal semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What describes the behavior of a program in terms of abstract machine execution steps?",
      "answer": "operational semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What outlines how each expression or statement is evaluated step-by-step and ideal for simulating program execution?",
      "answer": "operational semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What maps syntactic constructs to mathematical objects and offers an abstract, mathematical description of a program's meaning?",
      "answer": "denotational semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What helps in reasoning about program correctness and equivalence?",
      "answer": "denotational semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What might represent a function in programming as a mathematical mapping between input and output values?",
      "answer": "denotational semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What uses logical assertions, such as preconditions and postconditions, to specify and prove properties about a program?",
      "answer": "axiomatic semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
    {
      "question": "What is especially useful in verifying the correctness of algorithms?",
      "answer": "axiomatic semantics",
      "choices": [
        "operational semantics",
        "denotational semantics",
        "axiomatic semantics",
        "formal semantics"
      ],
      "reference": "Syntax and Semantics",
      "term": "Prelims"
    },
     {
      "question": "What is the association between an attribute and an entity such as a variable and its type or value?",
      "answer": "binding",
      "choices": [
        "binding",
        "binding time",
        "dynamic type binding",
        "scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What refers to the time a binding takes place, such as compile time or runtime?",
      "answer": "binding time",
      "choices": [
        "binding",
        "binding time",
        "scope",
        "type bindings"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "How is a variable associated with a data type before being referenced in a program?",
      "answer": "type bindings",
      "choices": [
        "type bindings",
        "binding",
        "binding time",
        "shadowing"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What kind of declaration lists variable names and specifies their particular type?",
      "answer": "explicit declaration",
      "choices": [
        "explicit declaration",
        "implicit declaration",
        "dynamic type binding",
        "scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "How is a variable associated with a type through default conventions without a declaration statement?",
      "answer": "implicit declaration",
      "choices": [
        "explicit declaration",
        "implicit declaration",
        "type bindings",
        "scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "How does it happen when the variable type is not specified by a declaration statement nor can be determined by the spelling of its name?",
      "answer": "dynamic type binding",
      "choices": [
        "binding time",
        "dynamic type binding",
        "explicit declaration",
        "lifetime and visibility"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What is the range of statements wherein the variable is visible and can be referenced or assigned in a statement?",
      "answer": "scope",
      "choices": [
        "binding",
        "dynamic type binding",
        "explicit declaration",
        "scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What determines where a variable can be used and modified within the code?",
      "answer": "lifetime and visibility",
      "choices": [
        "scope",
        "type bindings",
        "implicit declaration",
        "lifetime and visibility"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "Where are variables accessible from anywhere in the program, including inside functions?",
      "answer": "global scope",
      "choices": [
        "local scope",
        "global scope",
        "enclosing scope",
        "built-in scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What kind of scope refers to variables that are declared inside a function or block and are only accessible within that specific function or block?",
      "answer": "local scope",
      "choices": [
        "global scope",
        "local scope",
        "enclosing scope",
        "built-in scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What refers to the scope of a function that encloses another function?",
      "answer": "enclosing scope",
      "choices": [
        "local scope",
        "global scope",
        "enclosing scope",
        "built-in scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What scope contains all the functions and variables that are built into Python, like print(), len(), and int()?",
      "answer": "built-in scope",
      "choices": [
        "local scope",
        "global scope",
        "enclosing scope",
        "built-in scope"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What rule does Python follow when looking up variables in nested scopes?",
      "answer": "LEGB Rule",
      "choices": [
        "LEGB Rule",
        "shadowing",
        "global keyword",
        "type bindings"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What part of the LEGB Rule refers to the innermost scope?",
      "answer": "Local",
      "choices": [
        "Local",
        "Enclosing",
        "Global",
        "Built-in"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What part of the LEGB Rule refers to enclosing functions like in closures?",
      "answer": "Enclosing",
      "choices": [
        "Local",
        "Enclosing",
        "Global",
        "Built-in"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What part of the LEGB Rule refers to the module-level scope?",
      "answer": "Global",
      "choices": [
        "Local",
        "Enclosing",
        "Global",
        "Built-in"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What part of the LEGB Rule refers to Python's built-in objects and functions?",
      "answer": "Built-in",
      "choices": [
        "Local",
        "Enclosing",
        "Global",
        "Built-in"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What occurs when a local variable has the same name as an outer scope variable and overrides it?",
      "answer": "shadowing",
      "choices": [
        "binding",
        "global keyword",
        "scope",
        "shadowing"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What keyword is used to modify a global variable inside a function?",
      "answer": "global keyword",
      "choices": [
        "binding",
        "explicit declaration",
        "shadowing",
        "global keyword"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What is the binding time for the type of count?",
      "answer": "at compile time",
      "choices": [
        "at compile time",
        "at compiler design time",
        "at execution time",
        "at runtime"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What is the binding time for the set of possible values of count?",
      "answer": "at compiler design time",
      "choices": [
        "at compile time",
        "at compiler design time",
        "at execution time",
        "at runtime"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What is the binding time for the meaning of the operator symbol?",
      "answer": "at compile time",
      "choices": [
        "at compile time",
        "at compiler design time",
        "at execution time",
        "at runtime"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What is the binding time for internal representation of the literal (int)?",
      "answer": "at compiler design time",
      "choices": [
        "at compile time",
        "at compiler design time",
        "at execution time",
        "at runtime"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What is the binding time for value of the count?",
      "answer": "at execution time",
      "choices": [
        "at compile time",
        "at compiler design time",
        "at execution time",
        "at runtime"
      ],
      "reference": "Bindings and Scopes",
      "term": "Midterms"
    },
    {
      "question": "What is a string of characters used to identify some entity in a program called?",
      "answer": "name",
      "choices": [
        "Function",
        "Variable",
        "name",
        "Class"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What term can be used interchangeably with 'name'?",
      "answer": "identifier",
      "choices": [
        "identifier",
        "function",
        "operator",
        "parser"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What replaced the use of underscores in C-based languages?",
      "answer": "camel notation or camel case",
      "choices": [
        "camel notation or camel case",
        "horse case",
        "snake case",
        "dog case"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What naming style has embedded uppercase letters like myFirstCode?",
      "answer": "camel",
      "choices": [
        "camel",
        "pascal",
        "underscore",
        "proper"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is a string of characters used to identify some entity in a program?",
      "answer": "name",
      "choices": [
        "Function",
        "Variable",
        "name",
        "Class"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "Which languages have no length limit in naming, and all characters are significant?",
      "answer": "Java and C#",
      "choices": [
        "Java and C#",
        "C++",
        "PHP",
        "Perl"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What characters can follow the first letter in programming languages?",
      "answer": "names",
      "choices": [
        "names",
        "class",
        "variables",
        "functions"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "Which language does not specify length limits in names, but implementors sometimes do?",
      "answer": "C++",
      "choices": [
        "Java and C#",
        "C++",
        "Perl",
        "Ruby"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "Which language requires all variable names to begin with a dollar sign?",
      "answer": "PHP",
      "choices": [
        "Java and C#",
        "C++",
        "PHP",
        "Ruby"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "In which language do special characters like $, @, or % specify the type of a variable?",
      "answer": "Perl",
      "choices": [
        "Java and C#",
        "C++",
        "Perl",
        "Ruby"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "Which language uses @ and @@ to indicate instance and class variables?",
      "answer": "Ruby",
      "choices": [
        "Java and C#",
        "C++",
        "PHP",
        "Ruby"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What naming style in Python uses lowercase letters and underscores for readability?",
      "answer": "snake case",
      "choices": [
        "camel notation or camel case",
        "horse case",
        "snake case",
        "dog case"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the naming convention for Function in Python?",
      "answer": "Use lowercase words. Separate words by underscores to improve readability.",
      "choices": [
        "Use lowercase words. Separate words by underscores to improve readability.",
        "Start each word with a capital letter. Do not separate words with underscores.",
        "Use a short, lowercase word or words. Do not separate words with underscores.",
        "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the naming convention for Variable in Python?",
      "answer": "Use a lowercase single letter, word, or words. Separate words with underscores to improve readability",
      "choices": [
        "Use a lowercase single letter, word, or words. Separate words with underscores to improve readability",
        "Start each word with a capital letter. Do not separate words with underscores.",
        "Use a short, lowercase word or words. Do not separate words with underscores.",
        "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the naming convention for Class in Python?",
      "answer": "Start each word with a capital letter. Do not separate words with underscores.",
      "choices": [
        "Use a lowercase single letter, word, or words. Separate words with underscores to improve readability",
        "Start each word with a capital letter. Do not separate words with underscores.",
        "Use a short, lowercase word or words. Do not separate words with underscores.",
        "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the naming convention for Method in Python?",
      "answer": "Use lowercase words. Separate words by underscores to improve readability.",
      "choices": [
        "Use lowercase words. Separate words by underscores to improve readability.",
        "Start each word with a capital letter. Do not separate words with underscores.",
        "Use a short, lowercase word or words. Do not separate words with underscores.",
        "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the naming convention for Constant in Python?",
      "answer": "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability",
      "choices": [
        "Use lowercase words. Separate words by underscores to improve readability.",
        "Start each word with a capital letter. Do not separate words with underscores.",
        "Use a short, lowercase word or words. Do not separate words with underscores.",
        "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the naming convention for Module in Python?",
      "answer": "Use a short, lowercase word or words. Separate words with underscores to improve readability.",
      "choices": [
        "Use a short, lowercase word or words. Separate words with underscores to improve readability.",
        "Start each word with a capital letter. Do not separate words with underscores.",
        "Use a short, lowercase word or words. Do not separate words with underscores.",
        "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the naming convention for Package in Python?",
      "answer": "Use a short, lowercase word or words. Do not separate words with underscores.",
      "choices": [
        "Use a short, lowercase word or words. Separate words with underscores to improve readability.",
        "Start each word with a capital letter. Do not separate words with underscores.",
        "Use a short, lowercase word or words. Do not separate words with underscores.",
        "Use an uppercase single letter, word, or words. Separate words with underscores to improve readability"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What examples follow the function naming convention in Python?",
      "answer": "function, pyt_function",
      "choices": [
        "function, pyt_function",
        "z, var, pyt_variable",
        "Model, PythonClass",
        "class_method, method"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are some valid examples of variable names in Python?",
      "answer": "z, var, pyt_variable",
      "choices": [
        "CONSTANT, PYTH_CONSTANT, PYTHON_LONG_CONSTANT",
        "z, var, pyt_variable",
        "Model, PythonClass",
        "class_method, method"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are examples of Pascal case for class names?",
      "answer": "Model, PythonClass",
      "choices": [
        "function, pyt_function",
        "z, var, pyt_variable",
        "Model, PythonClass",
        "class_method, method"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are examples of method naming in Python?",
      "answer": "class_method, method",
      "choices": [
        "function, pyt_function",
        "z, var, pyt_variable",
        "Model, PythonClass",
        "class_method, method"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are examples of constants in Python?",
      "answer": "CONSTANT, PYTH_CONSTANT, PYTHON_LONG_CONSTANT",
      "choices": [
        "module.py, python_module.py",
        "package, pythonpackage",
        "CONSTANT, PYTH_CONSTANT, PYTHON_LONG_CONSTANT",
        "function, pyt_function"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are examples of module file names?",
      "answer": "module.py, python_module.py",
      "choices": [
        "module.py, python_module.py",
        "CONSTANT, PYTH_CONSTANT, PYTHON_LONG_CONSTANT",
        "z, var, pyt_variable",
        "function, pyt_function"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are examples of Python package names?",
      "answer": "package, pythonpackage",
      "choices": [
        "module.py, python_module.py",
        "package, pythonpackage",
        "z, var, pyt_variable",
        "CONSTANT, PYTH_CONSTANT, PYTHON_LONG_CONSTANT"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What naming style starts each word with a capital letter?",
      "answer": "pascal case",
      "choices": [
        "pascal case",
        "snake case",
        "camel case",
        "brief case"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "How are words that separate the syntactic parts of programs identified?",
      "answer": "special words",
      "choices": [
        "special words",
        "reserved words",
        "names",
        "identifiers"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are words in most programming languages that cannot be used as names?",
      "answer": "reserved words",
      "choices": [
        "special words",
        "reserved words",
        "names",
        "identifiers"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What language treats special words as keywords rather than reserved words?",
      "answer": "Fortran",
      "choices": [
        "Fortran",
        "Java and C#",
        "C++",
        "COBOL"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "Which language includes 300 reserved words that can limit programmer choices?",
      "answer": "COBOL",
      "choices": [
        "COBOL",
        "Fortran",
        "Java and C#",
        "C++"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is an abstraction of a memory cell or cells in programming?",
      "answer": "Variables",
      "choices": [
        "Variables",
        "Class",
        "Binding",
        "Scopes"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What can be made up of letters, numbers, and underscores in a program?",
      "answer": "Variable Names",
      "choices": [
        "Variable Names",
        "Variable Address",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What are the most common names in programs used to reference changing values?",
      "answer": "Variable Names",
      "choices": [
        "Variable Names",
        "Variable Address",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What acts as a numerical identifier that allows the program to access and manipulate the data held by a variable?",
      "answer": "Variable Address",
      "choices": [
        "Variable Scope",
        "Variable Address",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What identifies the unique memory location of a variable?",
      "answer": "Variable Address",
      "choices": [
        "Variable Names",
        "Variable Address",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What determines the range and valid operations of a variable?",
      "answer": "Variable Type",
      "choices": [
        "Variable Scope",
        "Variable Lifetime",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the content held by a memory cell associated with a variable?",
      "answer": "Variable Value",
      "choices": [
        "Variable Scope",
        "Variable Lifetime",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is required when a variable name appears on the right side of an assignment statement?",
      "answer": "Variable Value",
      "choices": [
        "Variable Scope",
        "Variable Address",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What defines how long a variable retains value in memory?",
      "answer": "Variable Lifetime",
      "choices": [
        "Variable Scope",
        "Variable Lifetime",
        "Variable Type",
        "Variable Value"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What defines the part of the program where a variable can be accessed?",
      "answer": "Variable Scope",
      "choices": [
        "Variable Scope",
        "Variable Address",
        "Variable Type",
        "Variable Lifetime"
      ],
      "reference": "Names",
      "term": "Midterms"
    },
    {
      "question": "What is the process of analyzing a string of symbols according to the rules of formal grammar?",
      "answer": "parsing",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is the process of analyzing a string of symbols according to the rules of formal grammar?",
      "answer": "Syntax analysis",
      "choices": [
        "Syntax analysis",
        "syntax errors",
        "syntax analyzer",
        "Abstract Syntax Tree"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What checks the source code to ensure that it follows the correct syntax of the programming language?",
      "answer": "Syntax analysis",
      "choices": [
        "Syntax analysis",
        "syntax errors",
        "syntax analyzer",
        "Abstract Syntax Tree"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What must be identified and corrected during parsing before a program can be successfully compiled?",
      "answer": "syntax errors",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is another term for syntax analysis?",
      "answer": "parsing",
      "choices": [
        "parser",
        "parse tree",
        "context-free grammar",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What takes the token streams from a lexical analyzer and analyzes them against production rules to detect errors?",
      "answer": "syntax analyzer",
      "choices": [
        "Syntax analysis",
        "syntax errors",
        "syntax analyzer",
        "Abstract Syntax Tree"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What takes the token streams from a lexical analyzer and analyzes them against production rules to detect errors?",
      "answer": "parser",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is another term for syntax analyzer?",
      "answer": "parser",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What represents the program’s structure as the output of the syntax analysis phase?",
      "answer": "parse tree",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What represents the program’s structure as the output of the syntax analysis phase?",
      "answer": "Abstract Syntax Tree",
      "choices": [
        "Syntax analysis",
        "syntax errors",
        "syntax analyzer",
        "Abstract Syntax Tree"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is another term for Abstract Syntax Tree?",
      "answer": "parse tree",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What can identify tokens using regular expressions but cannot check the syntax of a given sentence?",
      "answer": "lexical analyzer",
      "choices": [
        "lexical analyzer",
        "syntax analyzer",
        "Abstract Syntax Tree",
        "Syntax analysis"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What uses context-free grammar (CFG) to define the syntax rules of a programming language?",
      "answer": "Syntax analysis",
      "choices": [
        "Syntax analysis",
        "syntax errors",
        "syntax analyzer",
        "Abstract Syntax Tree"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What specifies the grammar of a language to ensure the source code adheres to the language’s syntax?",
      "answer": "context-free grammar",
      "choices": [
        "parser",
        "parsing",
        "context-free grammar",
        "syntax errors"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What step involves analyzing tokens based on grammar rules and constructing a parse tree or AST?",
      "answer": "parsing",
      "choices": [
        "error handling",
        "symbol table creation",
        "parsing",
        "context-free grammar"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What step detects and flags syntax errors in the input program and indicates where the error occurred?",
      "answer": "error handling",
      "choices": [
        "error handling",
        "symbol table creation",
        "ambiguity",
        "context-free grammar"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What step creates a symbol table to store information about identifiers such as type, scope, and location?",
      "answer": "symbol table creation",
      "choices": [
        "error handling",
        "symbol table creation",
        "parsing",
        "context-free grammar"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is the process of applying the rules of Context-Free Grammar to generate a sequence of tokens to form a valid structure?",
      "answer": "derivation",
      "choices": [
        "derivation",
        "parsing",
        "syntax errors",
        "context-free grammar"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is a sequence of production rules used to generate the input string for the parser?",
      "answer": "derivation",
      "choices": [
        "derivation",
        "parsing",
        "ambiguity",
        "context-free grammar"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which is true about parsing decisions for a sentential form?",
      "answer": "Deciding on the non-terminal to be replaced",
      "choices": [
        "Parsing ignores non-terminal symbols",
        "Production rules are applied randomly",
        "Deciding always starts from terminal symbols",
        "Deciding on the non-terminal to be replaced"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which is true about parsing decisions for a sentential form?",
      "answer": "Deciding the production rule by which the non-terminal will be replaced",
      "choices": [
        "Deciding the parsing ignores non-terminal symbols",
        "Production rules are applied randomly",
        "Parsing always starts from terminal symbols",
        "Deciding the production rule by which the non-terminal will be replaced"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which option describes the process if the sentential form of an input is scanned and replaced from left to right?",
      "answer": "left-most derivation",
      "choices": [
        "left-most derivation",
        "right-most derivation",
        "up-most derivation",
        "down-most derivation"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which option describes the derived sentential form of left-most derivation?",
      "answer": "left-sentential form",
      "choices": [
        "left-sentential form",
        "right-sentential form",
        "up-sentential form",
        "down-sentential form"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which option describes the process if the input is scanned and replaced with production rule?",
      "answer": "right-most derivation",
      "choices": [
        "left-most derivation",
        "right-most derivation",
        "up-most derivation",
        "down-most derivation"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which option describes the derived sentential form of right-most derivation?",
      "answer": "right-sentential form",
      "choices": [
        "left-sentential form",
        "right-sentential form",
        "up-sentential form",
        "down-sentential form"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What term describes the graphical representation of a derivation?",
      "answer": "parse tree",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What helps in seeing how strings are derived from the start symbol?\r\n",
      "answer": "parse tree",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What has all leaf nodes as terminals and all interior nodes as non-terminals?\r\n",
      "answer": "parse tree",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What represents associativity and precedence of operators?",
      "answer": "parse tree",
      "choices": [
        "parser",
        "parse tree",
        "syntax errors",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is traversed first in a parse tree?",
      "answer": "deepest sub-tree",
      "choices": [
        "deepest sub-tree",
        "farthest sub-tree",
        "parser",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is it called when a grammar has more than one parse tree for at least one string?",
      "answer": "ambiguity",
      "choices": [
        "ambiguity",
        "derivation",
        "error handling",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is the language generated by ambiguous grammar?",
      "answer": "inherently ambiguous",
      "choices": [
        "inherently ambiguous",
        "ambiguity",
        "error handling",
        "parsing"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What decides the side on which the operator takes an operand when there are operators on both sides of the operand?",
      "answer": "associativity",
      "choices": [
        "associativity",
        "left-associative operations",
        "right-associative operations",
        "precedence"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is the term for operations where the operand is taken by the left operator?",
      "answer": "left-associative operations",
      "choices": [
        "associativity",
        "left-associative operations",
        "right-associative operations",
        "precedence"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What is the term for operations where the operand is taken by the right operator?",
      "answer": "right-associative operations",
      "choices": [
        "associativity",
        "left-associative operations",
        "right-associative operations",
        "precedence"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "What decides which operator will take the operand when two different operators share a common operand?",
      "answer": "precedence",
      "choices": [
        "associativity",
        "left-associative operations",
        "right-associative operations",
        "precedence"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which is first or highest in priority in the hierarchy of priorities in Python?",
      "answer": "** or Exponentiation Operator",
      "choices": [
        "** or Exponentiation Operator",
        "Unary + and –",
        "*, /, //, %",
        "Binary + (Addition) and – (Subtraction)"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which is second in priority in the hierarchy of priorities in Python?",
      "answer": "Unary + and –",
      "choices": [
        "** or Exponentiation Operator",
        "Unary + and –",
        "*, /, //, %",
        "Binary + (Addition) and – (Subtraction)"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which is third in priority in the hierarchy of priorities in Python?",
      "answer": "*, /, //, %",
      "choices": [
        "** or Exponentiation Operator",
        "Unary + and –",
        "*, /, //, %",
        "Binary + (Addition) and – (Subtraction)"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "Which is fourth or lowest in priority in the hierarchy of priorities in Python?",
      "answer": "Binary + (Addition) and – (Subtraction)",
      "choices": [
        "** or Exponentiation Operator",
        "Unary + and –",
        "*, /, //, %",
        "Binary + (Addition) and – (Subtraction)"
      ],
      "reference": "Parsing",
      "term": "Midterms"
    },
    {
      "question": "How is the source code read and organized into tokens?",
      "answer": "Lexical analysis",
      "choices": [
        "output generation",
        "tokenization",
        "Lexical analysis",
        "Lexical analyzer"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What breaks the input code into meaningful elements called tokens for easier understanding by a computer?",
      "answer": "Lexical analysis",
      "choices": [
        "output generation",
        "tokenization",
        "Lexical analysis",
        "Lexical analyzer"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What eliminates comments and whitespace within the source code?",
      "answer": "Lexical analysis",
      "choices": [
        "input preprocessing",
        "symbols",
        "Lexical analysis",
        "tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How are characters collected into logical groupings and assigned internal codes based on their structure?",
      "answer": "Lexical analyzer",
      "choices": [
        "token classification",
        "Lexical analyzer",
        "regular expressions",
        "input preprocessing"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What are the logical groupings of characters collected by a lexical analyzer called?",
      "answer": "lexemes",
      "choices": [
        "tokens",
        "lexemes",
        "Lexical analyzer",
        "Lexical analysis"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What are the internal codes assigned to the categories of logical groupings called?",
      "answer": "tokens",
      "choices": [
        "tokens",
        "lexemes",
        "Lexical analyzer",
        "Lexical analysis"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How are tokens in programming languages often described?",
      "answer": "regular expressions",
      "choices": [
        "lexemes",
        "Lexical analysis",
        "output generation",
        "regular expressions"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What uses a Deterministic Finite Automaton (DFA) to recognize these tokens, as they can identify regular languages?",
      "answer": "Lexical analyzer",
      "choices": [
        "tokens",
        "lexemes",
        "Lexical analyzer",
        "Lexical analysis"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What process involves cleaning up the input text before lexical analysis?",
      "answer": "input preprocessing",
      "choices": [
        "input preprocessing",
        "tokenization",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What process removes comments, whitespaces, and other non-essential characters from the input text?",
      "answer": "input preprocessing",
      "choices": [
        "input preprocessing",
        "tokenization",
        "token classification",
        "output generation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What involves the process of breaking the input text into a sequence of tokens?",
      "answer": "tokenization",
      "choices": [
        "input preprocessing",
        "tokenization",
        "output generation",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How are characters in the input text matched against a set of patterns or regular expressions to define token types?",
      "answer": "tokenization",
      "choices": [
        "input preprocessing",
        "tokenization",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How does the analyzer determine the type of each token?",
      "answer": "token classification",
      "choices": [
        "input preprocessing",
        "tokenization",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How are keywords, identifiers, operators, and punctuation symbols classified as separate token types?",
      "answer": "token classification",
      "choices": [
        "output generation",
        "tokenization",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How does the analyzer check if each token is valid according to the rules of the programming language?",
      "answer": "token validation",
      "choices": [
        "input preprocessing",
        "tokenization",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How does the analyzer check if a variable name is a valid identifier or if an operator has correct syntax?",
      "answer": "token validation",
      "choices": [
        "input preprocessing",
        "tokenization",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How does the analyzer generate the output of the lexical analysis process as a list or sequence of tokens?",
      "answer": "output generation",
      "choices": [
        "input preprocessing",
        "output generation",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How is the list of tokens passed to the parser for syntax analysis in the next stage of compilation or interpretation?",
      "answer": "output generation",
      "choices": [
        "output generation",
        "tokenization",
        "token classification",
        "token validation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is typically a list or sequence of tokens generated from lexical analysis?",
      "answer": "token stream",
      "choices": [
        "token stream",
        "tokens",
        "lexemes",
        "non-tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What represents individual words or symbols such as keywords or variable names?",
      "answer": "tokens",
      "choices": [
        "alphabets",
        "string",
        "symbols",
        "tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What includes all the numbers and alphabets considered as hexadecimal alphabets by language?",
      "answer": "alphabets",
      "choices": [
        "alphabets",
        "string",
        "symbols",
        "tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is a collection of different alphabets occurring continuously?",
      "answer": "string",
      "choices": [
        "alphabets",
        "string",
        "symbols",
        "tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is defined by the number of characters or alphabets occurring together?",
      "answer": "string",
      "choices": [
        "alphabets",
        "string",
        "symbols",
        "tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What set of token is shown in the example: The length of |STIisthebest| is 12 since there are 12 characters?",
      "answer": "string",
      "choices": [
        "alphabets",
        "string",
        "symbols",
        "tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What do high-level programming languages contain as special characters like punctuation and assignment?",
      "answer": "symbols",
      "choices": [
        "alphabets",
        "string",
        "symbols",
        "tokens"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What includes comments, preprocessor directives, macros, blanks, tabs, and newlines?",
      "answer": "non-tokens",
      "choices": [
        "lexemes",
        "tokenization",
        "non-tokens",
        "regular expressions"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: Comma (,), Semicolon(:)",
      "answer": "punctuation",
      "choices": [
        "assignment",
        "special assignment",
        "comparison",
        "punctuation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: =",
      "answer": "assignment",
      "choices": [
        "assignment",
        "special assignment",
        "preprocessor",
        "punctuation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: +=, -=, *=, /=",
      "answer": "special assignment",
      "choices": [
        "preprocessor",
        "special assignment",
        "comparison",
        "punctuation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: ==, ≠, <, >, ≤, ≥",
      "answer": "comparison",
      "choices": [
        "assignment",
        "special assignment",
        "comparison",
        "punctuation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: #",
      "answer": "preprocessor",
      "choices": [
        "assignment",
        "special assignment",
        "comparison",
        "preprocessor"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: &",
      "answer": "location specifier",
      "choices": [
        "location specifier",
        "special assignment",
        "comparison",
        "punctuation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: &&, |, ||, !",
      "answer": "logical",
      "choices": [
        "preprocessor",
        "logical",
        "comparison",
        "punctuation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the name of the symbol in the given example?<BR>Example: >>, <<, >>>, <<<",
      "answer": "shift operator",
      "choices": [
        "preprocessor",
        "special assignment",
        "shift operator",
        "punctuation"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What are the sequence of characters matched by a pattern to form a token or comprise a single token?",
      "answer": "lexemes",
      "choices": [
        "tokens",
        "lexemes",
        "Lexical analyzer",
        "Lexical analysis"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is recognized by matching the input character string against character string patterns?",
      "answer": "lexemes",
      "choices": [
        "tokens",
        "lexemes",
        "Lexical analyzer",
        "Lexical analysis"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the lexeme of the token (IDENT) in the given example?<BR>Example: result = oldsum – value / 50;",
      "answer": "result",
      "choices": [
        "result",
        "-",
        50,
        ";"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the lexeme of the token (IDENT) in the given example?<BR>Example: result = oldsum – value / 50;",
      "answer": "oldssum",
      "choices": [
        "oldssum",
        "/",
        50,
        ";"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What is the lexeme of the token (IDENT) in the given example?<BR>Example: result = oldsum – value / 50;",
      "answer": "value",
      "choices": [
        "value",
        "/",
        50,
        ";"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "How many valid tokens are in the given example?<BR>int main(){<BR> // 2 variables<BR> int x, y;<BR> x = 10;<BR> return 0;<BR>}",
      "answer": 18,
      "choices": [
        18,
        16,
        20,
        21
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
    {
      "question": "What visual representation provides a zoomed look at how a lexical analyzer and syntax analyzer interact?",
      "answer": "INPUT ⇄ LEXICAL ANALYZER ⇄ SYNTAX ANALYZER",
      "choices": [
        "INPUT ⇄ LEXICAL ANALYZER ⇄ SYNTAX ANALYZER",
        "INPUT ⇄ SYNTAX ANALYZER ⇄ LEXICAL ANALYZER",
        "INPUT ⇄ SYNTAX ANALYZER ⇄ OUTPUT GENERATION",
        "INPUT ⇄ TOKENIZATION ⇄ OUTPUT GENERATION"
      ],
      "reference": "Lexical Analysis",
      "term": "Midterms"
    },
     {
      "question": "What produces a value in Python and can be used in calculations or logic?",
      "answer": "expression",
      "choices": [
        "assignment",
        "declaration",
        "expression",
        "execution"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What stores the value of an expression in a variable?",
      "answer": "assignment statement",
      "choices": [
        "function",
        "print",
        "assignment statement",
        "loop"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What combines values, variables, operators, and function calls into a single unit that evaluates to a result?",
      "answer": "expression",
      "choices": [
        "class",
        "function",
        "expression",
        "constant"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What forms the building blocks of logic in programming?",
      "answer": "expression",
      "choices": [
        "loop",
        "value",
        "expression",
        "keyword"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What is evaluated by Python to produce a value?",
      "answer": "expression",
      "choices": [
        "syntax",
        "assignment",
        "expression",
        "condition"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What consists of operands like values or variables and operators like +, -, *, /?",
      "answer": "expression",
      "choices": [
        "assignment",
        "output",
        "expression",
        "conversion"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What kind of expression uses operations like +, -, *, /, and **?",
      "answer": "arithmetic expression",
      "choices": [
        "relational",
        "logical",
        "arithmetic expression",
        "assignment"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What kind of expression is used in numerical computations?",
      "answer": "arithmetic expression",
      "choices": [
        "bitwise",
        "relational",
        "arithmetic expression",
        "conditional"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What evaluates to True or False using comparison operators?",
      "answer": "relational expression",
      "choices": [
        "arithmetic",
        "relational expression",
        "print",
        "variable"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What uses operators like ==, !=, >, <, >=, and <=?",
      "answer": "relational expression",
      "choices": [
        "expression",
        "logical expression",
        "relational expression",
        "loop"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What expression type is used in decision-making, like conditional statements and loops?",
      "answer": "relational expression",
      "choices": [
        "augmented",
        "relational expression",
        "string",
        "output"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What expression combines Boolean values using operators like and, or, not?",
      "answer": "logical expression",
      "choices": [
        "bitwise",
        "logical expression",
        "string",
        "tuple"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What kind of expression is used to construct complex conditional statements?",
      "answer": "logical expression",
      "choices": [
        "comparison",
        "arithmetic",
        "logical expression",
        "range"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What manipulates bits using symbols?",
      "answer": "bitwise expression",
      "choices": [
        "bitwise expression",
        "logical",
        "print",
        "conditional"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What operates at the binary level to set flags or manipulate binary data?",
      "answer": "bitwise expression",
      "choices": [
        "relational",
        "integer",
        "bitwise expression",
        "loop"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What stores a value in a variable using the = operator?",
      "answer": "assignment statement",
      "choices": [
        "declaration",
        "return",
        "assignment statement",
        "conditional"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What places a variable on the left of = and a value on the right?",
      "answer": "assignment statement",
      "choices": [
        "input",
        "assignment statement",
        "parameter",
        "class"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What allows storage of values in named memory locations?",
      "answer": "assignment statement",
      "choices": [
        "exception",
        "method",
        "assignment statement",
        "print"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What can assign values to multiple variables in one line?",
      "answer": "multiple assignment",
      "choices": [
        "multiple assignment",
        "conditional",
        "logical expression",
        "augmented statement"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What swaps variable values without using a temporary variable?",
      "answer": "assignment statement",
      "choices": [
        "swap operator",
        "assignment statement",
        "delete function",
        "return"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What provides a concise way to update a variable using math and assignment together?",
      "answer": "augmented assignment operator",
      "choices": [
        "return operator",
        "conditional operator",
        "augmented assignment operator",
        "statement"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What combines an arithmetic operation with assignment like += or *=?",
      "answer": "augmented assignment operator",
      "choices": [
        "function call",
        "augmented assignment operator",
        "output",
        "argument"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What operator multiplies a variable by another value and stores the result?",
      "answer": "*=",
      "choices": [
        "*=",
        ">>=",
        "**=",
        "//"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What operator performs exponentiation and stores the result in the same variable?",
      "answer": "**=",
      "choices": [
        "**=",
        "*=",
        "/=",
        "^"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What operator shifts the bits of a variable to the left?",
      "answer": "<<=",
      "choices": [
        ">>",
        "<<=",
        "&=",
        "^"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What operator shifts the bits of a variable to the right?",
      "answer": ">>=",
      "choices": [
        "<<=",
        ">>=",
        "&&",
        "or"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What operator applies bitwise OR and assigns the result to the variable?",
      "answer": "|=",
      "choices": [
        "|=",
        "<<=",
        "&=",
        "*="
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What expression can involve a function like square(n) and use its result in calculations?",
      "answer": "expression",
      "choices": [
        "return",
        "function",
        "expression",
        "logic"
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What happens when x += 5 is executed after x = 10?",
      "answer": 15,
      "choices": [
        10,
        5,
        15,
        30
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What is the output of x *= 2 if x was previously 15?",
      "answer": 30,
      "choices": [
        20,
        25,
        30,
        10
      ],
      "reference": "Expressions and Assignment Statements",
      "term": "Pre-Finals"
    },
    {
      "question": "What are numbers devoid of the fractional part?",
      "answer": "Integers",
      "choices": [
        "Integers",
        "Booleans",
        "Characters",
        "Floats"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What are numbers that contain or can contain the fractional part?",
      "answer": "Floating Points",
      "choices": [
        "Strings",
        "Floating Points",
        "Octals",
        "Binaries"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What determines the kind, range, and application of a numeric value?",
      "answer": "type",
      "choices": [
        "type",
        "input",
        "decimal",
        "value"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What is a string of digits that make up the number and must not be mixed with non-digits?",
      "answer": "integer",
      "choices": [
        "float",
        "keyword",
        "digit",
        "integer"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What does Python not accept to separate groups of digits for readability?",
      "answer": "underscores",
      "choices": [
        "plus signs",
        "dashes",
        "underscores",
        "quotation marks"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What results when a number is preceded by 00 or 0o and digits are from the [0..7] range?",
      "answer": "octal value",
      "choices": [
        "octal value",
        "range type",
        "exponent base",
        "float prefix"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What results from a number preceded by 0x or 0X and gives a decimal equivalent?",
      "answer": "hexadecimal value",
      "choices": [
        "float",
        "hexadecimal value",
        "integer",
        "long digit"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What represents and stores numbers with a decimal fraction that is not empty?",
      "answer": "float",
      "choices": [
        "character",
        "float",
        "boolean",
        "binary"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What is a part that may appear after the decimal in a number?",
      "answer": "non-empty decimal fraction",
      "choices": [
        "decimal point",
        "exponent",
        "non-empty decimal fraction",
        "minus sign"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What is the E or e in a number string like 3E8 that denotes the power of 10?",
      "answer": "exponents",
      "choices": [
        "base",
        "exponent",
        "exponents",
        "suffix"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What is used to process text and not numeric values, and must be enclosed in quotes?",
      "answer": "Strings",
      "choices": [
        "Numbers",
        "Floats",
        "Strings",
        "Variables"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What type of data is created when Python compares numbers to determine a condition is true or false?",
      "answer": "Boolean value",
      "choices": [
        "Expression",
        "Loop",
        "Boolean value",
        "Syntax Error"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What defines a system that uses only two distinct values such as True and False?",
      "answer": "Boolean algebra",
      "choices": [
        "Boolean logic",
        "Comparison test",
        "Boolean algebra",
        "Variable matching"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What are numbers that do not have any fractional part?",
      "answer": "Integers",
      "choices": [
        "Integers",
        "Floats",
        "Strings",
        "Booleans"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What are numbers that contain or can contain a fractional part?",
      "answer": "Floating Points",
      "choices": [
        "Floating Points",
        "Characters",
        "Integers",
        "Constants"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What determines the kind, range, and application of a numeric value?",
      "answer": "type",
      "choices": [
        "operator",
        "type",
        "formula",
        "length"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What is used in Python to improve readability of long numeric values instead of commas?",
      "answer": "underscores",
      "choices": [
        "commas",
        "spaces",
        "underscores",
        "decimals"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What prefix is used in Python for a number to be treated as octal?",
      "answer": "0o",
      "choices": [
        "0x",
        "0y",
        "0o",
        "ox"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What prefix must a number have to be interpreted as hexadecimal in Python?",
      "answer": "0x",
      "choices": [
        "0x",
        "0o",
        "0y",
        "10x"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What characters must surround a value to make it a complete string?",
      "answer": "quotes",
      "choices": [
        "quotes",
        "dashes",
        "backslashes",
        "colons"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What is the method used to escape quotation marks in a string in Python?",
      "answer": "backslash",
      "choices": [
        "comma",
        "backslash",
        "quote mark",
        "dollar sign"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    },
    {
      "question": "What kind of value is produced when Python is asked to evaluate a comparison like \"is 5 > 3\"?",
      "answer": "Boolean value",
      "choices": [
        "Boolean value",
        "Integer",
        "String",
        "Literal"
      ],
      "reference": "Data Types",
      "term": "Pre-Finals"
    }
  ]
}